<?php
namespace proto;

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 *  * Structs can also be exceptions, if they are nasty
 * exception InvalidOperation {
 *   1: i32 what,
 *   2: string why
 * }
 */
final class FTYPE {
  const NORMAL = 1;
  const SMS = 2;
  const ADDRESS = 3;
  static public $__names = array(
    1 => 'NORMAL',
    2 => 'SMS',
    3 => 'ADDRESS',
  );
}

class FileInfo {
  static $_TSPEC;

  /**
   * @var string
   */
  public $filename = null;
  /**
   * @var string
   */
  public $filesize = null;
  /**
   * @var string
   */
  public $lastModified = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'filename',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'filesize',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lastModified',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['filename'])) {
        $this->filename = $vals['filename'];
      }
      if (isset($vals['filesize'])) {
        $this->filesize = $vals['filesize'];
      }
      if (isset($vals['lastModified'])) {
        $this->lastModified = $vals['lastModified'];
      }
    }
  }

  public function getName() {
    return 'FileInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filename);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->filesize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastModified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('FileInfo');
    if ($this->filename !== null) {
      $xfer += $output->writeFieldBegin('filename', TType::STRING, 1);
      $xfer += $output->writeString($this->filename);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filesize !== null) {
      $xfer += $output->writeFieldBegin('filesize', TType::STRING, 2);
      $xfer += $output->writeString($this->filesize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastModified !== null) {
      $xfer += $output->writeFieldBegin('lastModified', TType::STRING, 3);
      $xfer += $output->writeString($this->lastModified);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class queryResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $retcode = null;
  /**
   * @var string
   */
  public $message = null;
  /**
   * @var array
   */
  public $files = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'files',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::SET,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::SET,
            'etype' => TType::STRUCT,
            'elem' => array(
              'type' => TType::STRUCT,
              'class' => '\proto\FileInfo',
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['files'])) {
        $this->files = $vals['files'];
      }
    }
  }

  public function getName() {
    return 'queryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->files = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = array();
              $xfer += $input->readI32($key5);
              $val6 = array();
              $_size7 = 0;
              $_etype10 = 0;
              $xfer += $input->readSetBegin($_etype10, $_size7);
              for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
              {
                $elem12 = null;
                $elem12 = new \proto\FileInfo();
                $xfer += $elem12->read($input);
                if (is_scalar($elem12)) {
                  $val6[$elem12] = true;
                } else {
                  $val6 []= $elem12;
                }
              }
              $xfer += $input->readSetEnd();
              $this->files[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('queryResult');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::BYTE, 1);
      $xfer += $output->writeByte($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->files !== null) {
      if (!is_array($this->files)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('files', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::SET, count($this->files));
        {
          foreach ($this->files as $kiter13 => $viter14)
          {
            $xfer += $output->writeI32($kiter13);
            {
              $output->writeSetBegin(TType::STRUCT, count($viter14));
              {
                foreach ($viter14 as $iter15 => $iter16)
                {
                  if (is_scalar($iter16)) {
                  $xfer += $iter15->write($output);
                  } else {
                  $xfer += $iter16->write($output);
                  }
                }
              }
              $output->writeSetEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class loginResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $token = null;
  /**
   * @var int
   */
  public $retcode = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'token',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'retcode',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['token'])) {
        $this->token = $vals['token'];
      }
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'loginResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->token);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('loginResult');
    if ($this->token !== null) {
      $xfer += $output->writeFieldBegin('token', TType::I64, 1);
      $xfer += $output->writeI64($this->token);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::BYTE, 2);
      $xfer += $output->writeByte($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 3);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class downloadResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $retcode = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'downloadResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('downloadResult');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::BYTE, 1);
      $xfer += $output->writeByte($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class uploaddResult {
  static $_TSPEC;

  /**
   * @var int
   */
  public $retcode = null;
  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'retcode',
          'type' => TType::BYTE,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['retcode'])) {
        $this->retcode = $vals['retcode'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'uploaddResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->retcode);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('uploaddResult');
    if ($this->retcode !== null) {
      $xfer += $output->writeFieldBegin('retcode', TType::BYTE, 1);
      $xfer += $output->writeByte($this->retcode);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


