/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package proto;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * *
 *  download parameter
 *  1: Token token
 *  2: string filepath
 *  3: i64 offerstar
 */
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2015-11-07")
public class DownloadParam implements org.apache.thrift.TBase<DownloadParam, DownloadParam._Fields>, java.io.Serializable, Cloneable, Comparable<DownloadParam> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DownloadParam");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FILEPATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filepath", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OFFERSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offerset", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new DownloadParamStandardSchemeFactory());
    schemes.put(TupleScheme.class, new DownloadParamTupleSchemeFactory());
  }

  public String token; // required
  public String filepath; // required
  public long offerset; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    FILEPATH((short)2, "filepath"),
    OFFERSET((short)3, "offerset");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // FILEPATH
          return FILEPATH;
        case 3: // OFFERSET
          return OFFERSET;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OFFERSET_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Token")));
    tmpMap.put(_Fields.FILEPATH, new org.apache.thrift.meta_data.FieldMetaData("filepath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OFFERSET, new org.apache.thrift.meta_data.FieldMetaData("offerset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DownloadParam.class, metaDataMap);
  }

  public DownloadParam() {
    this.offerset = 0L;

  }

  public DownloadParam(
    String token,
    String filepath,
    long offerset)
  {
    this();
    this.token = token;
    this.filepath = filepath;
    this.offerset = offerset;
    setOffersetIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DownloadParam(DownloadParam other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetFilepath()) {
      this.filepath = other.filepath;
    }
    this.offerset = other.offerset;
  }

  public DownloadParam deepCopy() {
    return new DownloadParam(this);
  }

  @Override
  public void clear() {
    this.token = null;
    this.filepath = null;
    this.offerset = 0L;

  }

  public String getToken() {
    return this.token;
  }

  public DownloadParam setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getFilepath() {
    return this.filepath;
  }

  public DownloadParam setFilepath(String filepath) {
    this.filepath = filepath;
    return this;
  }

  public void unsetFilepath() {
    this.filepath = null;
  }

  /** Returns true if field filepath is set (has been assigned a value) and false otherwise */
  public boolean isSetFilepath() {
    return this.filepath != null;
  }

  public void setFilepathIsSet(boolean value) {
    if (!value) {
      this.filepath = null;
    }
  }

  public long getOfferset() {
    return this.offerset;
  }

  public DownloadParam setOfferset(long offerset) {
    this.offerset = offerset;
    setOffersetIsSet(true);
    return this;
  }

  public void unsetOfferset() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OFFERSET_ISSET_ID);
  }

  /** Returns true if field offerset is set (has been assigned a value) and false otherwise */
  public boolean isSetOfferset() {
    return EncodingUtils.testBit(__isset_bitfield, __OFFERSET_ISSET_ID);
  }

  public void setOffersetIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OFFERSET_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case FILEPATH:
      if (value == null) {
        unsetFilepath();
      } else {
        setFilepath((String)value);
      }
      break;

    case OFFERSET:
      if (value == null) {
        unsetOfferset();
      } else {
        setOfferset((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case FILEPATH:
      return getFilepath();

    case OFFERSET:
      return getOfferset();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case FILEPATH:
      return isSetFilepath();
    case OFFERSET:
      return isSetOfferset();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DownloadParam)
      return this.equals((DownloadParam)that);
    return false;
  }

  public boolean equals(DownloadParam that) {
    if (that == null)
      return false;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_filepath = true && this.isSetFilepath();
    boolean that_present_filepath = true && that.isSetFilepath();
    if (this_present_filepath || that_present_filepath) {
      if (!(this_present_filepath && that_present_filepath))
        return false;
      if (!this.filepath.equals(that.filepath))
        return false;
    }

    boolean this_present_offerset = true;
    boolean that_present_offerset = true;
    if (this_present_offerset || that_present_offerset) {
      if (!(this_present_offerset && that_present_offerset))
        return false;
      if (this.offerset != that.offerset)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_token = true && (isSetToken());
    list.add(present_token);
    if (present_token)
      list.add(token);

    boolean present_filepath = true && (isSetFilepath());
    list.add(present_filepath);
    if (present_filepath)
      list.add(filepath);

    boolean present_offerset = true;
    list.add(present_offerset);
    if (present_offerset)
      list.add(offerset);

    return list.hashCode();
  }

  @Override
  public int compareTo(DownloadParam other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFilepath()).compareTo(other.isSetFilepath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFilepath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filepath, other.filepath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOfferset()).compareTo(other.isSetOfferset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOfferset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offerset, other.offerset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DownloadParam(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("filepath:");
    if (this.filepath == null) {
      sb.append("null");
    } else {
      sb.append(this.filepath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("offerset:");
    sb.append(this.offerset);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DownloadParamStandardSchemeFactory implements SchemeFactory {
    public DownloadParamStandardScheme getScheme() {
      return new DownloadParamStandardScheme();
    }
  }

  private static class DownloadParamStandardScheme extends StandardScheme<DownloadParam> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DownloadParam struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FILEPATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.filepath = iprot.readString();
              struct.setFilepathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OFFERSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offerset = iprot.readI64();
              struct.setOffersetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DownloadParam struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.filepath != null) {
        oprot.writeFieldBegin(FILEPATH_FIELD_DESC);
        oprot.writeString(struct.filepath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFERSET_FIELD_DESC);
      oprot.writeI64(struct.offerset);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DownloadParamTupleSchemeFactory implements SchemeFactory {
    public DownloadParamTupleScheme getScheme() {
      return new DownloadParamTupleScheme();
    }
  }

  private static class DownloadParamTupleScheme extends TupleScheme<DownloadParam> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DownloadParam struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetFilepath()) {
        optionals.set(1);
      }
      if (struct.isSetOfferset()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetFilepath()) {
        oprot.writeString(struct.filepath);
      }
      if (struct.isSetOfferset()) {
        oprot.writeI64(struct.offerset);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DownloadParam struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.filepath = iprot.readString();
        struct.setFilepathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.offerset = iprot.readI64();
        struct.setOffersetIsSet(true);
      }
    }
  }

}

