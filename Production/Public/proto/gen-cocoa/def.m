/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"
#import "TAsyncTransport.h"
#import "TProtocolFactory.h"
#import "TBaseClient.h"


#import "def.h"

@implementation ReqObjparam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFilename: (NSString *) filename type: (int) type comm: (NSString *) comm
{
  self = [super init];
  __filename = [filename retain_stub];
  __filename_isset = YES;
  __type = type;
  __type_isset = YES;
  __comm = [comm retain_stub];
  __comm_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"filename"])
  {
    __filename = [[decoder decodeObjectForKey: @"filename"] retain_stub];
    __filename_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"comm"])
  {
    __comm = [[decoder decodeObjectForKey: @"comm"] retain_stub];
    __comm_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__filename_isset)
  {
    [encoder encodeObject: __filename forKey: @"filename"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__comm_isset)
  {
    [encoder encodeObject: __comm forKey: @"comm"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __filename_isset ? 2654435761 : 0;
  if (__filename_isset)
  {
    hash = (hash * 31) ^ [__filename hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __comm_isset ? 2654435761 : 0;
  if (__comm_isset)
  {
    hash = (hash * 31) ^ [__comm hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[ReqObjparam class]]) {
    return NO;
  }
  ReqObjparam *other = (ReqObjparam *)anObject;
  if ((__filename_isset != other->__filename_isset) ||
      (__filename_isset && ((__filename || other->__filename) && ![__filename isEqual:other->__filename]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__comm_isset != other->__comm_isset) ||
      (__comm_isset && ((__comm || other->__comm) && ![__comm isEqual:other->__comm]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__filename release_stub];
  [__comm release_stub];
  [super dealloc_stub];
}

- (NSString *) filename {
  return [[__filename retain_stub] autorelease_stub];
}

- (void) setFilename: (NSString *) filename {
  [filename retain_stub];
  [__filename release_stub];
  __filename = filename;
  __filename_isset = YES;
}

- (BOOL) filenameIsSet {
  return __filename_isset;
}

- (void) unsetFilename {
  [__filename release_stub];
  __filename = nil;
  __filename_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) comm {
  return [[__comm retain_stub] autorelease_stub];
}

- (void) setComm: (NSString *) comm {
  [comm retain_stub];
  [__comm release_stub];
  __comm = comm;
  __comm_isset = YES;
}

- (BOOL) commIsSet {
  return __comm_isset;
}

- (void) unsetComm {
  [__comm release_stub];
  __comm = nil;
  __comm_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setComm: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqObjparam"];
  if (__filename_isset) {
    if (__filename != nil) {
      [outProtocol writeFieldBeginWithName: @"filename" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __filename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__comm_isset) {
    if (__comm != nil) {
      [outProtocol writeFieldBeginWithName: @"comm" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __comm];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReqObjparam("];
  [ms appendString: @"filename:"];
  [ms appendFormat: @"\"%@\"", __filename];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",comm:"];
  [ms appendFormat: @"\"%@\"", __comm];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RetHead

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRet: (int) ret msg: (NSString *) msg
{
  self = [super init];
  __ret = ret;
  __ret_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"ret"])
  {
    __ret = [decoder decodeIntForKey: @"ret"];
    __ret_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__ret_isset)
  {
    [encoder encodeInt: __ret forKey: @"ret"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __ret_isset ? 2654435761 : 0;
  if (__ret_isset)
  {
    hash = (hash * 31) ^ [@(__ret) hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RetHead class]]) {
    return NO;
  }
  RetHead *other = (RetHead *)anObject;
  if ((__ret_isset != other->__ret_isset) ||
      (__ret_isset && (__ret != other->__ret))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__msg release_stub];
  [super dealloc_stub];
}

- (int) ret {
  return __ret;
}

- (void) setRet: (int) ret {
  __ret = ret;
  __ret_isset = YES;
}

- (BOOL) retIsSet {
  return __ret_isset;
}

- (void) unsetRet {
  __ret_isset = NO;
}

- (NSString *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSString *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setRet: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RetHead"];
  if (__ret_isset) {
    [outProtocol writeFieldBeginWithName: @"ret" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __ret];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RetHead("];
  [ms appendString: @"ret:"];
  [ms appendFormat: @"%i", __ret];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FileInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithObjid: (OBJID) objid filesize: (int64_t) filesize ftype: (int) ftype lastModified: (int32_t) lastModified
{
  self = [super init];
  __objid = [objid retain_stub];
  __objid_isset = YES;
  __filesize = filesize;
  __filesize_isset = YES;
  __ftype = ftype;
  __ftype_isset = YES;
  __lastModified = lastModified;
  __lastModified_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"objid"])
  {
    __objid = [[decoder decodeObjectForKey: @"objid"] retain_stub];
    __objid_isset = YES;
  }
  if ([decoder containsValueForKey: @"filesize"])
  {
    __filesize = [decoder decodeInt64ForKey: @"filesize"];
    __filesize_isset = YES;
  }
  if ([decoder containsValueForKey: @"ftype"])
  {
    __ftype = [decoder decodeIntForKey: @"ftype"];
    __ftype_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastModified"])
  {
    __lastModified = [decoder decodeInt32ForKey: @"lastModified"];
    __lastModified_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__objid_isset)
  {
    [encoder encodeObject: __objid forKey: @"objid"];
  }
  if (__filesize_isset)
  {
    [encoder encodeInt64: __filesize forKey: @"filesize"];
  }
  if (__ftype_isset)
  {
    [encoder encodeInt: __ftype forKey: @"ftype"];
  }
  if (__lastModified_isset)
  {
    [encoder encodeInt32: __lastModified forKey: @"lastModified"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __objid_isset ? 2654435761 : 0;
  if (__objid_isset)
  {
    hash = (hash * 31) ^ [__objid hash];
  }
  hash = (hash * 31) ^ __filesize_isset ? 2654435761 : 0;
  if (__filesize_isset)
  {
    hash = (hash * 31) ^ [@(__filesize) hash];
  }
  hash = (hash * 31) ^ __ftype_isset ? 2654435761 : 0;
  if (__ftype_isset)
  {
    hash = (hash * 31) ^ [@(__ftype) hash];
  }
  hash = (hash * 31) ^ __lastModified_isset ? 2654435761 : 0;
  if (__lastModified_isset)
  {
    hash = (hash * 31) ^ [@(__lastModified) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FileInfo class]]) {
    return NO;
  }
  FileInfo *other = (FileInfo *)anObject;
  if ((__objid_isset != other->__objid_isset) ||
      (__objid_isset && ((__objid || other->__objid) && ![__objid isEqual:other->__objid]))) {
    return NO;
  }
  if ((__filesize_isset != other->__filesize_isset) ||
      (__filesize_isset && (__filesize != other->__filesize))) {
    return NO;
  }
  if ((__ftype_isset != other->__ftype_isset) ||
      (__ftype_isset && (__ftype != other->__ftype))) {
    return NO;
  }
  if ((__lastModified_isset != other->__lastModified_isset) ||
      (__lastModified_isset && (__lastModified != other->__lastModified))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__objid release_stub];
  [super dealloc_stub];
}

- (NSString *) objid {
  return [[__objid retain_stub] autorelease_stub];
}

- (void) setObjid: (NSString *) objid {
  [objid retain_stub];
  [__objid release_stub];
  __objid = objid;
  __objid_isset = YES;
}

- (BOOL) objidIsSet {
  return __objid_isset;
}

- (void) unsetObjid {
  [__objid release_stub];
  __objid = nil;
  __objid_isset = NO;
}

- (int64_t) filesize {
  return __filesize;
}

- (void) setFilesize: (int64_t) filesize {
  __filesize = filesize;
  __filesize_isset = YES;
}

- (BOOL) filesizeIsSet {
  return __filesize_isset;
}

- (void) unsetFilesize {
  __filesize_isset = NO;
}

- (int) ftype {
  return __ftype;
}

- (void) setFtype: (int) ftype {
  __ftype = ftype;
  __ftype_isset = YES;
}

- (BOOL) ftypeIsSet {
  return __ftype_isset;
}

- (void) unsetFtype {
  __ftype_isset = NO;
}

- (int32_t) lastModified {
  return __lastModified;
}

- (void) setLastModified: (int32_t) lastModified {
  __lastModified = lastModified;
  __lastModified_isset = YES;
}

- (BOOL) lastModifiedIsSet {
  return __lastModified_isset;
}

- (void) unsetLastModified {
  __lastModified_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObjid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFilesize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLastModified: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FileInfo"];
  if (__objid_isset) {
    if (__objid != nil) {
      [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __objid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__filesize_isset) {
    [outProtocol writeFieldBeginWithName: @"filesize" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __filesize];
    [outProtocol writeFieldEnd];
  }
  if (__ftype_isset) {
    [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __ftype];
    [outProtocol writeFieldEnd];
  }
  if (__lastModified_isset) {
    [outProtocol writeFieldBeginWithName: @"lastModified" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __lastModified];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FileInfo("];
  [ms appendString: @"objid:"];
  [ms appendFormat: @"\"%@\"", __objid];
  [ms appendString: @",filesize:"];
  [ms appendFormat: @"%qi", __filesize];
  [ms appendString: @",ftype:"];
  [ms appendFormat: @"%i", __ftype];
  [ms appendString: @",lastModified:"];
  [ms appendFormat: @"%i", __lastModified];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryFListResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result files: (FilesMatchList) files spare: (int32_t) spare isEnd: (BOOL) isEnd
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __files = [files retain_stub];
  __files_isset = YES;
  __spare = spare;
  __spare_isset = YES;
  __isEnd = isEnd;
  __isEnd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"files"])
  {
    __files = [[decoder decodeObjectForKey: @"files"] retain_stub];
    __files_isset = YES;
  }
  if ([decoder containsValueForKey: @"spare"])
  {
    __spare = [decoder decodeInt32ForKey: @"spare"];
    __spare_isset = YES;
  }
  if ([decoder containsValueForKey: @"isEnd"])
  {
    __isEnd = [decoder decodeBoolForKey: @"isEnd"];
    __isEnd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__files_isset)
  {
    [encoder encodeObject: __files forKey: @"files"];
  }
  if (__spare_isset)
  {
    [encoder encodeInt32: __spare forKey: @"spare"];
  }
  if (__isEnd_isset)
  {
    [encoder encodeBool: __isEnd forKey: @"isEnd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __files_isset ? 2654435761 : 0;
  if (__files_isset)
  {
    hash = (hash * 31) ^ [__files hash];
  }
  hash = (hash * 31) ^ __spare_isset ? 2654435761 : 0;
  if (__spare_isset)
  {
    hash = (hash * 31) ^ [@(__spare) hash];
  }
  hash = (hash * 31) ^ __isEnd_isset ? 2654435761 : 0;
  if (__isEnd_isset)
  {
    hash = (hash * 31) ^ [@(__isEnd) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFListResult class]]) {
    return NO;
  }
  QueryFListResult *other = (QueryFListResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__files_isset != other->__files_isset) ||
      (__files_isset && ((__files || other->__files) && ![__files isEqual:other->__files]))) {
    return NO;
  }
  if ((__spare_isset != other->__spare_isset) ||
      (__spare_isset && (__spare != other->__spare))) {
    return NO;
  }
  if ((__isEnd_isset != other->__isEnd_isset) ||
      (__isEnd_isset && (__isEnd != other->__isEnd))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__files release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSMutableArray *) files {
  return [[__files retain_stub] autorelease_stub];
}

- (void) setFiles: (NSMutableArray *) files {
  [files retain_stub];
  [__files release_stub];
  __files = files;
  __files_isset = YES;
}

- (BOOL) filesIsSet {
  return __files_isset;
}

- (void) unsetFiles {
  [__files release_stub];
  __files = nil;
  __files_isset = NO;
}

- (int32_t) spare {
  return __spare;
}

- (void) setSpare: (int32_t) spare {
  __spare = spare;
  __spare_isset = YES;
}

- (BOOL) spareIsSet {
  return __spare_isset;
}

- (void) unsetSpare {
  __spare_isset = NO;
}

- (BOOL) isEnd {
  return __isEnd;
}

- (void) setIsEnd: (BOOL) isEnd {
  __isEnd = isEnd;
  __isEnd_isset = YES;
}

- (BOOL) isEndIsSet {
  return __isEnd_isset;
}

- (void) unsetIsEnd {
  __isEnd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            FileInfo *_elem2 = [[FileInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setFiles: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSpare: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsEnd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFListResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__files_isset) {
    if (__files != nil) {
      [outProtocol writeFieldBeginWithName: @"files" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__files count]];
        int idx4;
        for (idx4 = 0; idx4 < [__files count]; idx4++)
        {
          [[__files objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__spare_isset) {
    [outProtocol writeFieldBeginWithName: @"spare" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __spare];
    [outProtocol writeFieldEnd];
  }
  if (__isEnd_isset) {
    [outProtocol writeFieldBeginWithName: @"isEnd" type: TType_BOOL fieldID: 4];
    [outProtocol writeBool: __isEnd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFListResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",files:"];
  [ms appendFormat: @"%@", __files];
  [ms appendString: @",spare:"];
  [ms appendFormat: @"%i", __spare];
  [ms appendString: @",isEnd:"];
  [ms appendFormat: @"%i", __isEnd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation GetFilterResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result bitset: (NSData *) bitset
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __bitset = [bitset retain_stub];
  __bitset_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"bitset"])
  {
    __bitset = [[decoder decodeObjectForKey: @"bitset"] retain_stub];
    __bitset_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__bitset_isset)
  {
    [encoder encodeObject: __bitset forKey: @"bitset"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __bitset_isset ? 2654435761 : 0;
  if (__bitset_isset)
  {
    hash = (hash * 31) ^ [__bitset hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetFilterResult class]]) {
    return NO;
  }
  GetFilterResult *other = (GetFilterResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__bitset_isset != other->__bitset_isset) ||
      (__bitset_isset && ((__bitset || other->__bitset) && ![__bitset isEqual:other->__bitset]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__bitset release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSData *) bitset {
  return [[__bitset retain_stub] autorelease_stub];
}

- (void) setBitset: (NSData *) bitset {
  [bitset retain_stub];
  [__bitset release_stub];
  __bitset = bitset;
  __bitset_isset = YES;
}

- (BOOL) bitsetIsSet {
  return __bitset_isset;
}

- (void) unsetBitset {
  [__bitset release_stub];
  __bitset = nil;
  __bitset_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBitset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetFilterResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bitset_isset) {
    if (__bitset != nil) {
      [outProtocol writeFieldBeginWithName: @"bitset" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __bitset];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetFilterResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",bitset:"];
  [ms appendFormat: @"\"%@\"", __bitset];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryFResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result finfo: (FileInfo *) finfo
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __finfo = [finfo retain_stub];
  __finfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"finfo"])
  {
    __finfo = [[decoder decodeObjectForKey: @"finfo"] retain_stub];
    __finfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__finfo_isset)
  {
    [encoder encodeObject: __finfo forKey: @"finfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __finfo_isset ? 2654435761 : 0;
  if (__finfo_isset)
  {
    hash = (hash * 31) ^ [__finfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFResult class]]) {
    return NO;
  }
  QueryFResult *other = (QueryFResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__finfo_isset != other->__finfo_isset) ||
      (__finfo_isset && ((__finfo || other->__finfo) && ![__finfo isEqual:other->__finfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__finfo release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (FileInfo *) finfo {
  return [[__finfo retain_stub] autorelease_stub];
}

- (void) setFinfo: (FileInfo *) finfo {
  [finfo retain_stub];
  [__finfo release_stub];
  __finfo = finfo;
  __finfo_isset = YES;
}

- (BOOL) finfoIsSet {
  return __finfo_isset;
}

- (void) unsetFinfo {
  [__finfo release_stub];
  __finfo = nil;
  __finfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          FileInfo *fieldValue = [[FileInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setFinfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__finfo_isset) {
    if (__finfo != nil) {
      [outProtocol writeFieldBeginWithName: @"finfo" type: TType_STRUCT fieldID: 2];
      [__finfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",finfo:"];
  [ms appendFormat: @"%@", __finfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAliasname: (NSString *) aliasname male: (BOOL) male age: (int32_t) age mobile: (NSString *) mobile
{
  self = [super init];
  __aliasname = [aliasname retain_stub];
  __aliasname_isset = YES;
  __male = male;
  __male_isset = YES;
  __age = age;
  __age_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"aliasname"])
  {
    __aliasname = [[decoder decodeObjectForKey: @"aliasname"] retain_stub];
    __aliasname_isset = YES;
  }
  if ([decoder containsValueForKey: @"male"])
  {
    __male = [decoder decodeBoolForKey: @"male"];
    __male_isset = YES;
  }
  if ([decoder containsValueForKey: @"age"])
  {
    __age = [decoder decodeInt32ForKey: @"age"];
    __age_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__aliasname_isset)
  {
    [encoder encodeObject: __aliasname forKey: @"aliasname"];
  }
  if (__male_isset)
  {
    [encoder encodeBool: __male forKey: @"male"];
  }
  if (__age_isset)
  {
    [encoder encodeInt32: __age forKey: @"age"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __aliasname_isset ? 2654435761 : 0;
  if (__aliasname_isset)
  {
    hash = (hash * 31) ^ [__aliasname hash];
  }
  hash = (hash * 31) ^ __male_isset ? 2654435761 : 0;
  if (__male_isset)
  {
    hash = (hash * 31) ^ [@(__male) hash];
  }
  hash = (hash * 31) ^ __age_isset ? 2654435761 : 0;
  if (__age_isset)
  {
    hash = (hash * 31) ^ [@(__age) hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UserInfo class]]) {
    return NO;
  }
  UserInfo *other = (UserInfo *)anObject;
  if ((__aliasname_isset != other->__aliasname_isset) ||
      (__aliasname_isset && ((__aliasname || other->__aliasname) && ![__aliasname isEqual:other->__aliasname]))) {
    return NO;
  }
  if ((__male_isset != other->__male_isset) ||
      (__male_isset && (__male != other->__male))) {
    return NO;
  }
  if ((__age_isset != other->__age_isset) ||
      (__age_isset && (__age != other->__age))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__aliasname release_stub];
  [__mobile release_stub];
  [super dealloc_stub];
}

- (NSString *) aliasname {
  return [[__aliasname retain_stub] autorelease_stub];
}

- (void) setAliasname: (NSString *) aliasname {
  [aliasname retain_stub];
  [__aliasname release_stub];
  __aliasname = aliasname;
  __aliasname_isset = YES;
}

- (BOOL) aliasnameIsSet {
  return __aliasname_isset;
}

- (void) unsetAliasname {
  [__aliasname release_stub];
  __aliasname = nil;
  __aliasname_isset = NO;
}

- (BOOL) male {
  return __male;
}

- (void) setMale: (BOOL) male {
  __male = male;
  __male_isset = YES;
}

- (BOOL) maleIsSet {
  return __male_isset;
}

- (void) unsetMale {
  __male_isset = NO;
}

- (int32_t) age {
  return __age;
}

- (void) setAge: (int32_t) age {
  __age = age;
  __age_isset = YES;
}

- (BOOL) ageIsSet {
  return __age_isset;
}

- (void) unsetAge {
  __age_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAliasname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setMale: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__aliasname_isset) {
    if (__aliasname != nil) {
      [outProtocol writeFieldBeginWithName: @"aliasname" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __aliasname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__male_isset) {
    [outProtocol writeFieldBeginWithName: @"male" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __male];
    [outProtocol writeFieldEnd];
  }
  if (__age_isset) {
    [outProtocol writeFieldBeginWithName: @"age" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __age];
    [outProtocol writeFieldEnd];
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"aliasname:"];
  [ms appendFormat: @"\"%@\"", __aliasname];
  [ms appendString: @",male:"];
  [ms appendFormat: @"%i", __male];
  [ms appendString: @",age:"];
  [ms appendFormat: @"%i", __age];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result token: (Token) token space: (int64_t) space uspace: (int64_t) uspace userid: (int32_t) userid flow: (int64_t) flow uflow: (int64_t) uflow
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __space = space;
  __space_isset = YES;
  __uspace = uspace;
  __uspace_isset = YES;
  __userid = userid;
  __userid_isset = YES;
  __flow = flow;
  __flow_isset = YES;
  __uflow = uflow;
  __uflow_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"space"])
  {
    __space = [decoder decodeInt64ForKey: @"space"];
    __space_isset = YES;
  }
  if ([decoder containsValueForKey: @"uspace"])
  {
    __uspace = [decoder decodeInt64ForKey: @"uspace"];
    __uspace_isset = YES;
  }
  if ([decoder containsValueForKey: @"userid"])
  {
    __userid = [decoder decodeInt32ForKey: @"userid"];
    __userid_isset = YES;
  }
  if ([decoder containsValueForKey: @"flow"])
  {
    __flow = [decoder decodeInt64ForKey: @"flow"];
    __flow_isset = YES;
  }
  if ([decoder containsValueForKey: @"uflow"])
  {
    __uflow = [decoder decodeInt64ForKey: @"uflow"];
    __uflow_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__space_isset)
  {
    [encoder encodeInt64: __space forKey: @"space"];
  }
  if (__uspace_isset)
  {
    [encoder encodeInt64: __uspace forKey: @"uspace"];
  }
  if (__userid_isset)
  {
    [encoder encodeInt32: __userid forKey: @"userid"];
  }
  if (__flow_isset)
  {
    [encoder encodeInt64: __flow forKey: @"flow"];
  }
  if (__uflow_isset)
  {
    [encoder encodeInt64: __uflow forKey: @"uflow"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __space_isset ? 2654435761 : 0;
  if (__space_isset)
  {
    hash = (hash * 31) ^ [@(__space) hash];
  }
  hash = (hash * 31) ^ __uspace_isset ? 2654435761 : 0;
  if (__uspace_isset)
  {
    hash = (hash * 31) ^ [@(__uspace) hash];
  }
  hash = (hash * 31) ^ __userid_isset ? 2654435761 : 0;
  if (__userid_isset)
  {
    hash = (hash * 31) ^ [@(__userid) hash];
  }
  hash = (hash * 31) ^ __flow_isset ? 2654435761 : 0;
  if (__flow_isset)
  {
    hash = (hash * 31) ^ [@(__flow) hash];
  }
  hash = (hash * 31) ^ __uflow_isset ? 2654435761 : 0;
  if (__uflow_isset)
  {
    hash = (hash * 31) ^ [@(__uflow) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[LoginResult class]]) {
    return NO;
  }
  LoginResult *other = (LoginResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__space_isset != other->__space_isset) ||
      (__space_isset && (__space != other->__space))) {
    return NO;
  }
  if ((__uspace_isset != other->__uspace_isset) ||
      (__uspace_isset && (__uspace != other->__uspace))) {
    return NO;
  }
  if ((__userid_isset != other->__userid_isset) ||
      (__userid_isset && (__userid != other->__userid))) {
    return NO;
  }
  if ((__flow_isset != other->__flow_isset) ||
      (__flow_isset && (__flow != other->__flow))) {
    return NO;
  }
  if ((__uflow_isset != other->__uflow_isset) ||
      (__uflow_isset && (__uflow != other->__uflow))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__token release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int64_t) space {
  return __space;
}

- (void) setSpace: (int64_t) space {
  __space = space;
  __space_isset = YES;
}

- (BOOL) spaceIsSet {
  return __space_isset;
}

- (void) unsetSpace {
  __space_isset = NO;
}

- (int64_t) uspace {
  return __uspace;
}

- (void) setUspace: (int64_t) uspace {
  __uspace = uspace;
  __uspace_isset = YES;
}

- (BOOL) uspaceIsSet {
  return __uspace_isset;
}

- (void) unsetUspace {
  __uspace_isset = NO;
}

- (int32_t) userid {
  return __userid;
}

- (void) setUserid: (int32_t) userid {
  __userid = userid;
  __userid_isset = YES;
}

- (BOOL) useridIsSet {
  return __userid_isset;
}

- (void) unsetUserid {
  __userid_isset = NO;
}

- (int64_t) flow {
  return __flow;
}

- (void) setFlow: (int64_t) flow {
  __flow = flow;
  __flow_isset = YES;
}

- (BOOL) flowIsSet {
  return __flow_isset;
}

- (void) unsetFlow {
  __flow_isset = NO;
}

- (int64_t) uflow {
  return __uflow;
}

- (void) setUflow: (int64_t) uflow {
  __uflow = uflow;
  __uflow_isset = YES;
}

- (BOOL) uflowIsSet {
  return __uflow_isset;
}

- (void) unsetUflow {
  __uflow_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSpace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUspace: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFlow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUflow: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__space_isset) {
    [outProtocol writeFieldBeginWithName: @"space" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __space];
    [outProtocol writeFieldEnd];
  }
  if (__uspace_isset) {
    [outProtocol writeFieldBeginWithName: @"uspace" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __uspace];
    [outProtocol writeFieldEnd];
  }
  if (__userid_isset) {
    [outProtocol writeFieldBeginWithName: @"userid" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __userid];
    [outProtocol writeFieldEnd];
  }
  if (__flow_isset) {
    [outProtocol writeFieldBeginWithName: @"flow" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __flow];
    [outProtocol writeFieldEnd];
  }
  if (__uflow_isset) {
    [outProtocol writeFieldBeginWithName: @"uflow" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __uflow];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",space:"];
  [ms appendFormat: @"%qi", __space];
  [ms appendString: @",uspace:"];
  [ms appendFormat: @"%qi", __uspace];
  [ms appendString: @",userid:"];
  [ms appendFormat: @"%i", __userid];
  [ms appendString: @",flow:"];
  [ms appendFormat: @"%qi", __flow];
  [ms appendString: @",uflow:"];
  [ms appendFormat: @"%qi", __uflow];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfoResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result uinfo: (UserInfo *) uinfo userid: (int32_t) userid
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __uinfo = [uinfo retain_stub];
  __uinfo_isset = YES;
  __userid = userid;
  __userid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"uinfo"])
  {
    __uinfo = [[decoder decodeObjectForKey: @"uinfo"] retain_stub];
    __uinfo_isset = YES;
  }
  if ([decoder containsValueForKey: @"userid"])
  {
    __userid = [decoder decodeInt32ForKey: @"userid"];
    __userid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__uinfo_isset)
  {
    [encoder encodeObject: __uinfo forKey: @"uinfo"];
  }
  if (__userid_isset)
  {
    [encoder encodeInt32: __userid forKey: @"userid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __uinfo_isset ? 2654435761 : 0;
  if (__uinfo_isset)
  {
    hash = (hash * 31) ^ [__uinfo hash];
  }
  hash = (hash * 31) ^ __userid_isset ? 2654435761 : 0;
  if (__userid_isset)
  {
    hash = (hash * 31) ^ [@(__userid) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UserInfoResult class]]) {
    return NO;
  }
  UserInfoResult *other = (UserInfoResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__uinfo_isset != other->__uinfo_isset) ||
      (__uinfo_isset && ((__uinfo || other->__uinfo) && ![__uinfo isEqual:other->__uinfo]))) {
    return NO;
  }
  if ((__userid_isset != other->__userid_isset) ||
      (__userid_isset && (__userid != other->__userid))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__uinfo release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (UserInfo *) uinfo {
  return [[__uinfo retain_stub] autorelease_stub];
}

- (void) setUinfo: (UserInfo *) uinfo {
  [uinfo retain_stub];
  [__uinfo release_stub];
  __uinfo = uinfo;
  __uinfo_isset = YES;
}

- (BOOL) uinfoIsSet {
  return __uinfo_isset;
}

- (void) unsetUinfo {
  [__uinfo release_stub];
  __uinfo = nil;
  __uinfo_isset = NO;
}

- (int32_t) userid {
  return __userid;
}

- (void) setUserid: (int32_t) userid {
  __userid = userid;
  __userid_isset = YES;
}

- (BOOL) useridIsSet {
  return __userid_isset;
}

- (void) unsetUserid {
  __userid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setUinfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setUserid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfoResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uinfo_isset) {
    if (__uinfo != nil) {
      [outProtocol writeFieldBeginWithName: @"uinfo" type: TType_STRUCT fieldID: 2];
      [__uinfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userid_isset) {
    [outProtocol writeFieldBeginWithName: @"userid" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __userid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfoResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",uinfo:"];
  [ms appendFormat: @"%@", __uinfo];
  [ms appendString: @",userid:"];
  [ms appendFormat: @"%i", __userid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserAliasResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result aliasname: (NSString *) aliasname
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __aliasname = [aliasname retain_stub];
  __aliasname_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"aliasname"])
  {
    __aliasname = [[decoder decodeObjectForKey: @"aliasname"] retain_stub];
    __aliasname_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__aliasname_isset)
  {
    [encoder encodeObject: __aliasname forKey: @"aliasname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __aliasname_isset ? 2654435761 : 0;
  if (__aliasname_isset)
  {
    hash = (hash * 31) ^ [__aliasname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UserAliasResult class]]) {
    return NO;
  }
  UserAliasResult *other = (UserAliasResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__aliasname_isset != other->__aliasname_isset) ||
      (__aliasname_isset && ((__aliasname || other->__aliasname) && ![__aliasname isEqual:other->__aliasname]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__aliasname release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) aliasname {
  return [[__aliasname retain_stub] autorelease_stub];
}

- (void) setAliasname: (NSString *) aliasname {
  [aliasname retain_stub];
  [__aliasname release_stub];
  __aliasname = aliasname;
  __aliasname_isset = YES;
}

- (BOOL) aliasnameIsSet {
  return __aliasname_isset;
}

- (void) unsetAliasname {
  [__aliasname release_stub];
  __aliasname = nil;
  __aliasname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAliasname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserAliasResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__aliasname_isset) {
    if (__aliasname != nil) {
      [outProtocol writeFieldBeginWithName: @"aliasname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __aliasname];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserAliasResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",aliasname:"];
  [ms appendFormat: @"\"%@\"", __aliasname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DownloadResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result bin: (NSData *) bin
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __bin = [bin retain_stub];
  __bin_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"bin"])
  {
    __bin = [[decoder decodeObjectForKey: @"bin"] retain_stub];
    __bin_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__bin_isset)
  {
    [encoder encodeObject: __bin forKey: @"bin"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __bin_isset ? 2654435761 : 0;
  if (__bin_isset)
  {
    hash = (hash * 31) ^ [__bin hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DownloadResult class]]) {
    return NO;
  }
  DownloadResult *other = (DownloadResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__bin_isset != other->__bin_isset) ||
      (__bin_isset && ((__bin || other->__bin) && ![__bin isEqual:other->__bin]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__bin release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSData *) bin {
  return [[__bin retain_stub] autorelease_stub];
}

- (void) setBin: (NSData *) bin {
  [bin retain_stub];
  [__bin release_stub];
  __bin = bin;
  __bin_isset = YES;
}

- (BOOL) binIsSet {
  return __bin_isset;
}

- (void) unsetBin {
  [__bin release_stub];
  __bin = nil;
  __bin_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DownloadResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bin_isset) {
    if (__bin != nil) {
      [outProtocol writeFieldBeginWithName: @"bin" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __bin];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DownloadResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",bin:"];
  [ms appendFormat: @"\"%@\"", __bin];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation DownloadParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.offerset = 0;

  self.reqlen = 1024;

#endif
  return self;
}

- (id) initWithObjid: (OBJID) objid offerset: (int64_t) offerset reqlen: (int32_t) reqlen type: (int) type
{
  self = [super init];
  __objid = [objid retain_stub];
  __objid_isset = YES;
  __offerset = offerset;
  __offerset_isset = YES;
  __reqlen = reqlen;
  __reqlen_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"objid"])
  {
    __objid = [[decoder decodeObjectForKey: @"objid"] retain_stub];
    __objid_isset = YES;
  }
  if ([decoder containsValueForKey: @"offerset"])
  {
    __offerset = [decoder decodeInt64ForKey: @"offerset"];
    __offerset_isset = YES;
  }
  if ([decoder containsValueForKey: @"reqlen"])
  {
    __reqlen = [decoder decodeInt32ForKey: @"reqlen"];
    __reqlen_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__objid_isset)
  {
    [encoder encodeObject: __objid forKey: @"objid"];
  }
  if (__offerset_isset)
  {
    [encoder encodeInt64: __offerset forKey: @"offerset"];
  }
  if (__reqlen_isset)
  {
    [encoder encodeInt32: __reqlen forKey: @"reqlen"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __objid_isset ? 2654435761 : 0;
  if (__objid_isset)
  {
    hash = (hash * 31) ^ [__objid hash];
  }
  hash = (hash * 31) ^ __offerset_isset ? 2654435761 : 0;
  if (__offerset_isset)
  {
    hash = (hash * 31) ^ [@(__offerset) hash];
  }
  hash = (hash * 31) ^ __reqlen_isset ? 2654435761 : 0;
  if (__reqlen_isset)
  {
    hash = (hash * 31) ^ [@(__reqlen) hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DownloadParam class]]) {
    return NO;
  }
  DownloadParam *other = (DownloadParam *)anObject;
  if ((__objid_isset != other->__objid_isset) ||
      (__objid_isset && ((__objid || other->__objid) && ![__objid isEqual:other->__objid]))) {
    return NO;
  }
  if ((__offerset_isset != other->__offerset_isset) ||
      (__offerset_isset && (__offerset != other->__offerset))) {
    return NO;
  }
  if ((__reqlen_isset != other->__reqlen_isset) ||
      (__reqlen_isset && (__reqlen != other->__reqlen))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__objid release_stub];
  [super dealloc_stub];
}

- (NSString *) objid {
  return [[__objid retain_stub] autorelease_stub];
}

- (void) setObjid: (NSString *) objid {
  [objid retain_stub];
  [__objid release_stub];
  __objid = objid;
  __objid_isset = YES;
}

- (BOOL) objidIsSet {
  return __objid_isset;
}

- (void) unsetObjid {
  [__objid release_stub];
  __objid = nil;
  __objid_isset = NO;
}

- (int64_t) offerset {
  return __offerset;
}

- (void) setOfferset: (int64_t) offerset {
  __offerset = offerset;
  __offerset_isset = YES;
}

- (BOOL) offersetIsSet {
  return __offerset_isset;
}

- (void) unsetOfferset {
  __offerset_isset = NO;
}

- (int32_t) reqlen {
  return __reqlen;
}

- (void) setReqlen: (int32_t) reqlen {
  __reqlen = reqlen;
  __reqlen_isset = YES;
}

- (BOOL) reqlenIsSet {
  return __reqlen_isset;
}

- (void) unsetReqlen {
  __reqlen_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObjid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOfferset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReqlen: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DownloadParam"];
  if (__objid_isset) {
    if (__objid != nil) {
      [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __objid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offerset_isset) {
    [outProtocol writeFieldBeginWithName: @"offerset" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __offerset];
    [outProtocol writeFieldEnd];
  }
  if (__reqlen_isset) {
    [outProtocol writeFieldBeginWithName: @"reqlen" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __reqlen];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DownloadParam("];
  [ms appendString: @"objid:"];
  [ms appendFormat: @"\"%@\"", __objid];
  [ms appendString: @",offerset:"];
  [ms appendFormat: @"%qi", __offerset];
  [ms appendString: @",reqlen:"];
  [ms appendFormat: @"%i", __reqlen];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UploaddResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UploaddResult class]]) {
    return NO;
  }
  UploaddResult *other = (UploaddResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploaddResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploaddResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AllocObjResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result resourceid: (OBJID) resourceid
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __resourceid = [resourceid retain_stub];
  __resourceid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceid"])
  {
    __resourceid = [[decoder decodeObjectForKey: @"resourceid"] retain_stub];
    __resourceid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__resourceid_isset)
  {
    [encoder encodeObject: __resourceid forKey: @"resourceid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __resourceid_isset ? 2654435761 : 0;
  if (__resourceid_isset)
  {
    hash = (hash * 31) ^ [__resourceid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AllocObjResult class]]) {
    return NO;
  }
  AllocObjResult *other = (AllocObjResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__resourceid_isset != other->__resourceid_isset) ||
      (__resourceid_isset && ((__resourceid || other->__resourceid) && ![__resourceid isEqual:other->__resourceid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__resourceid release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) resourceid {
  return [[__resourceid retain_stub] autorelease_stub];
}

- (void) setResourceid: (NSString *) resourceid {
  [resourceid retain_stub];
  [__resourceid release_stub];
  __resourceid = resourceid;
  __resourceid_isset = YES;
}

- (BOOL) resourceidIsSet {
  return __resourceid_isset;
}

- (void) unsetResourceid {
  [__resourceid release_stub];
  __resourceid = nil;
  __resourceid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setResourceid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AllocObjResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resourceid_isset) {
    if (__resourceid != nil) {
      [outProtocol writeFieldBeginWithName: @"resourceid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __resourceid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AllocObjResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",resourceid:"];
  [ms appendFormat: @"\"%@\"", __resourceid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryUpldObjResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result offset: (int64_t) offset
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt64ForKey: @"offset"];
    __offset_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt64: __offset forKey: @"offset"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryUpldObjResult class]]) {
    return NO;
  }
  QueryUpldObjResult *other = (QueryUpldObjResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int64_t) offset {
  return __offset;
}

- (void) setOffset: (int64_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryUpldObjResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __offset];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryUpldObjResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%qi", __offset];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UsageResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result capacity: (int64_t) capacity usage: (int64_t) usage
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __usage = usage;
  __usage_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"capacity"])
  {
    __capacity = [decoder decodeInt64ForKey: @"capacity"];
    __capacity_isset = YES;
  }
  if ([decoder containsValueForKey: @"usage"])
  {
    __usage = [decoder decodeInt64ForKey: @"usage"];
    __usage_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__capacity_isset)
  {
    [encoder encodeInt64: __capacity forKey: @"capacity"];
  }
  if (__usage_isset)
  {
    [encoder encodeInt64: __usage forKey: @"usage"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __capacity_isset ? 2654435761 : 0;
  if (__capacity_isset)
  {
    hash = (hash * 31) ^ [@(__capacity) hash];
  }
  hash = (hash * 31) ^ __usage_isset ? 2654435761 : 0;
  if (__usage_isset)
  {
    hash = (hash * 31) ^ [@(__usage) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UsageResult class]]) {
    return NO;
  }
  UsageResult *other = (UsageResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__capacity_isset != other->__capacity_isset) ||
      (__capacity_isset && (__capacity != other->__capacity))) {
    return NO;
  }
  if ((__usage_isset != other->__usage_isset) ||
      (__usage_isset && (__usage != other->__usage))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int64_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int64_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (int64_t) usage {
  return __usage;
}

- (void) setUsage: (int64_t) usage {
  __usage = usage;
  __usage_isset = YES;
}

- (BOOL) usageIsSet {
  return __usage_isset;
}

- (void) unsetUsage {
  __usage_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUsage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UsageResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__usage_isset) {
    [outProtocol writeFieldBeginWithName: @"usage" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __usage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UsageResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%qi", __capacity];
  [ms appendString: @",usage:"];
  [ms appendFormat: @"%qi", __usage];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AppInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAppName: (NSString *) AppName AppVersion: (NSString *) AppVersion PackageName: (NSString *) PackageName size: (int64_t) size url: (NSString *) url ico_url: (NSString *) ico_url
{
  self = [super init];
  __AppName = [AppName retain_stub];
  __AppName_isset = YES;
  __AppVersion = [AppVersion retain_stub];
  __AppVersion_isset = YES;
  __PackageName = [PackageName retain_stub];
  __PackageName_isset = YES;
  __size = size;
  __size_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __ico_url = [ico_url retain_stub];
  __ico_url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"AppName"])
  {
    __AppName = [[decoder decodeObjectForKey: @"AppName"] retain_stub];
    __AppName_isset = YES;
  }
  if ([decoder containsValueForKey: @"AppVersion"])
  {
    __AppVersion = [[decoder decodeObjectForKey: @"AppVersion"] retain_stub];
    __AppVersion_isset = YES;
  }
  if ([decoder containsValueForKey: @"PackageName"])
  {
    __PackageName = [[decoder decodeObjectForKey: @"PackageName"] retain_stub];
    __PackageName_isset = YES;
  }
  if ([decoder containsValueForKey: @"size"])
  {
    __size = [decoder decodeInt64ForKey: @"size"];
    __size_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"ico_url"])
  {
    __ico_url = [[decoder decodeObjectForKey: @"ico_url"] retain_stub];
    __ico_url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__AppName_isset)
  {
    [encoder encodeObject: __AppName forKey: @"AppName"];
  }
  if (__AppVersion_isset)
  {
    [encoder encodeObject: __AppVersion forKey: @"AppVersion"];
  }
  if (__PackageName_isset)
  {
    [encoder encodeObject: __PackageName forKey: @"PackageName"];
  }
  if (__size_isset)
  {
    [encoder encodeInt64: __size forKey: @"size"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__ico_url_isset)
  {
    [encoder encodeObject: __ico_url forKey: @"ico_url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __AppName_isset ? 2654435761 : 0;
  if (__AppName_isset)
  {
    hash = (hash * 31) ^ [__AppName hash];
  }
  hash = (hash * 31) ^ __AppVersion_isset ? 2654435761 : 0;
  if (__AppVersion_isset)
  {
    hash = (hash * 31) ^ [__AppVersion hash];
  }
  hash = (hash * 31) ^ __PackageName_isset ? 2654435761 : 0;
  if (__PackageName_isset)
  {
    hash = (hash * 31) ^ [__PackageName hash];
  }
  hash = (hash * 31) ^ __size_isset ? 2654435761 : 0;
  if (__size_isset)
  {
    hash = (hash * 31) ^ [@(__size) hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __ico_url_isset ? 2654435761 : 0;
  if (__ico_url_isset)
  {
    hash = (hash * 31) ^ [__ico_url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppInfo class]]) {
    return NO;
  }
  AppInfo *other = (AppInfo *)anObject;
  if ((__AppName_isset != other->__AppName_isset) ||
      (__AppName_isset && ((__AppName || other->__AppName) && ![__AppName isEqual:other->__AppName]))) {
    return NO;
  }
  if ((__AppVersion_isset != other->__AppVersion_isset) ||
      (__AppVersion_isset && ((__AppVersion || other->__AppVersion) && ![__AppVersion isEqual:other->__AppVersion]))) {
    return NO;
  }
  if ((__PackageName_isset != other->__PackageName_isset) ||
      (__PackageName_isset && ((__PackageName || other->__PackageName) && ![__PackageName isEqual:other->__PackageName]))) {
    return NO;
  }
  if ((__size_isset != other->__size_isset) ||
      (__size_isset && (__size != other->__size))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__ico_url_isset != other->__ico_url_isset) ||
      (__ico_url_isset && ((__ico_url || other->__ico_url) && ![__ico_url isEqual:other->__ico_url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__AppName release_stub];
  [__AppVersion release_stub];
  [__PackageName release_stub];
  [__url release_stub];
  [__ico_url release_stub];
  [super dealloc_stub];
}

- (NSString *) AppName {
  return [[__AppName retain_stub] autorelease_stub];
}

- (void) setAppName: (NSString *) AppName {
  [AppName retain_stub];
  [__AppName release_stub];
  __AppName = AppName;
  __AppName_isset = YES;
}

- (BOOL) AppNameIsSet {
  return __AppName_isset;
}

- (void) unsetAppName {
  [__AppName release_stub];
  __AppName = nil;
  __AppName_isset = NO;
}

- (NSString *) AppVersion {
  return [[__AppVersion retain_stub] autorelease_stub];
}

- (void) setAppVersion: (NSString *) AppVersion {
  [AppVersion retain_stub];
  [__AppVersion release_stub];
  __AppVersion = AppVersion;
  __AppVersion_isset = YES;
}

- (BOOL) AppVersionIsSet {
  return __AppVersion_isset;
}

- (void) unsetAppVersion {
  [__AppVersion release_stub];
  __AppVersion = nil;
  __AppVersion_isset = NO;
}

- (NSString *) PackageName {
  return [[__PackageName retain_stub] autorelease_stub];
}

- (void) setPackageName: (NSString *) PackageName {
  [PackageName retain_stub];
  [__PackageName release_stub];
  __PackageName = PackageName;
  __PackageName_isset = YES;
}

- (BOOL) PackageNameIsSet {
  return __PackageName_isset;
}

- (void) unsetPackageName {
  [__PackageName release_stub];
  __PackageName = nil;
  __PackageName_isset = NO;
}

- (int64_t) size {
  return __size;
}

- (void) setSize: (int64_t) size {
  __size = size;
  __size_isset = YES;
}

- (BOOL) sizeIsSet {
  return __size_isset;
}

- (void) unsetSize {
  __size_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) ico_url {
  return [[__ico_url retain_stub] autorelease_stub];
}

- (void) setIco_url: (NSString *) ico_url {
  [ico_url retain_stub];
  [__ico_url release_stub];
  __ico_url = ico_url;
  __ico_url_isset = YES;
}

- (BOOL) ico_urlIsSet {
  return __ico_url_isset;
}

- (void) unsetIco_url {
  [__ico_url release_stub];
  __ico_url = nil;
  __ico_url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPackageName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIco_url: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppInfo"];
  if (__AppName_isset) {
    if (__AppName != nil) {
      [outProtocol writeFieldBeginWithName: @"AppName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __AppName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__AppVersion_isset) {
    if (__AppVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"AppVersion" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __AppVersion];
      [outProtocol writeFieldEnd];
    }
  }
  if (__PackageName_isset) {
    if (__PackageName != nil) {
      [outProtocol writeFieldBeginWithName: @"PackageName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __PackageName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__size_isset) {
    [outProtocol writeFieldBeginWithName: @"size" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __size];
    [outProtocol writeFieldEnd];
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ico_url_isset) {
    if (__ico_url != nil) {
      [outProtocol writeFieldBeginWithName: @"ico_url" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __ico_url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppInfo("];
  [ms appendString: @"AppName:"];
  [ms appendFormat: @"\"%@\"", __AppName];
  [ms appendString: @",AppVersion:"];
  [ms appendFormat: @"\"%@\"", __AppVersion];
  [ms appendString: @",PackageName:"];
  [ms appendFormat: @"\"%@\"", __PackageName];
  [ms appendString: @",size:"];
  [ms appendFormat: @"%qi", __size];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",ico_url:"];
  [ms appendFormat: @"\"%@\"", __ico_url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FeeInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithPrdName: (NSString *) PrdName Spnumber: (NSString *) Spnumber Cost: (NSString *) Cost Smscmd: (NSString *) Smscmd Description: (NSString *) Description
{
  self = [super init];
  __PrdName = [PrdName retain_stub];
  __PrdName_isset = YES;
  __Spnumber = [Spnumber retain_stub];
  __Spnumber_isset = YES;
  __Cost = [Cost retain_stub];
  __Cost_isset = YES;
  __Smscmd = [Smscmd retain_stub];
  __Smscmd_isset = YES;
  __Description = [Description retain_stub];
  __Description_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"PrdName"])
  {
    __PrdName = [[decoder decodeObjectForKey: @"PrdName"] retain_stub];
    __PrdName_isset = YES;
  }
  if ([decoder containsValueForKey: @"Spnumber"])
  {
    __Spnumber = [[decoder decodeObjectForKey: @"Spnumber"] retain_stub];
    __Spnumber_isset = YES;
  }
  if ([decoder containsValueForKey: @"Cost"])
  {
    __Cost = [[decoder decodeObjectForKey: @"Cost"] retain_stub];
    __Cost_isset = YES;
  }
  if ([decoder containsValueForKey: @"Smscmd"])
  {
    __Smscmd = [[decoder decodeObjectForKey: @"Smscmd"] retain_stub];
    __Smscmd_isset = YES;
  }
  if ([decoder containsValueForKey: @"Description"])
  {
    __Description = [[decoder decodeObjectForKey: @"Description"] retain_stub];
    __Description_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__PrdName_isset)
  {
    [encoder encodeObject: __PrdName forKey: @"PrdName"];
  }
  if (__Spnumber_isset)
  {
    [encoder encodeObject: __Spnumber forKey: @"Spnumber"];
  }
  if (__Cost_isset)
  {
    [encoder encodeObject: __Cost forKey: @"Cost"];
  }
  if (__Smscmd_isset)
  {
    [encoder encodeObject: __Smscmd forKey: @"Smscmd"];
  }
  if (__Description_isset)
  {
    [encoder encodeObject: __Description forKey: @"Description"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __PrdName_isset ? 2654435761 : 0;
  if (__PrdName_isset)
  {
    hash = (hash * 31) ^ [__PrdName hash];
  }
  hash = (hash * 31) ^ __Spnumber_isset ? 2654435761 : 0;
  if (__Spnumber_isset)
  {
    hash = (hash * 31) ^ [__Spnumber hash];
  }
  hash = (hash * 31) ^ __Cost_isset ? 2654435761 : 0;
  if (__Cost_isset)
  {
    hash = (hash * 31) ^ [__Cost hash];
  }
  hash = (hash * 31) ^ __Smscmd_isset ? 2654435761 : 0;
  if (__Smscmd_isset)
  {
    hash = (hash * 31) ^ [__Smscmd hash];
  }
  hash = (hash * 31) ^ __Description_isset ? 2654435761 : 0;
  if (__Description_isset)
  {
    hash = (hash * 31) ^ [__Description hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[FeeInfo class]]) {
    return NO;
  }
  FeeInfo *other = (FeeInfo *)anObject;
  if ((__PrdName_isset != other->__PrdName_isset) ||
      (__PrdName_isset && ((__PrdName || other->__PrdName) && ![__PrdName isEqual:other->__PrdName]))) {
    return NO;
  }
  if ((__Spnumber_isset != other->__Spnumber_isset) ||
      (__Spnumber_isset && ((__Spnumber || other->__Spnumber) && ![__Spnumber isEqual:other->__Spnumber]))) {
    return NO;
  }
  if ((__Cost_isset != other->__Cost_isset) ||
      (__Cost_isset && ((__Cost || other->__Cost) && ![__Cost isEqual:other->__Cost]))) {
    return NO;
  }
  if ((__Smscmd_isset != other->__Smscmd_isset) ||
      (__Smscmd_isset && ((__Smscmd || other->__Smscmd) && ![__Smscmd isEqual:other->__Smscmd]))) {
    return NO;
  }
  if ((__Description_isset != other->__Description_isset) ||
      (__Description_isset && ((__Description || other->__Description) && ![__Description isEqual:other->__Description]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__PrdName release_stub];
  [__Spnumber release_stub];
  [__Cost release_stub];
  [__Smscmd release_stub];
  [__Description release_stub];
  [super dealloc_stub];
}

- (NSString *) PrdName {
  return [[__PrdName retain_stub] autorelease_stub];
}

- (void) setPrdName: (NSString *) PrdName {
  [PrdName retain_stub];
  [__PrdName release_stub];
  __PrdName = PrdName;
  __PrdName_isset = YES;
}

- (BOOL) PrdNameIsSet {
  return __PrdName_isset;
}

- (void) unsetPrdName {
  [__PrdName release_stub];
  __PrdName = nil;
  __PrdName_isset = NO;
}

- (NSString *) Spnumber {
  return [[__Spnumber retain_stub] autorelease_stub];
}

- (void) setSpnumber: (NSString *) Spnumber {
  [Spnumber retain_stub];
  [__Spnumber release_stub];
  __Spnumber = Spnumber;
  __Spnumber_isset = YES;
}

- (BOOL) SpnumberIsSet {
  return __Spnumber_isset;
}

- (void) unsetSpnumber {
  [__Spnumber release_stub];
  __Spnumber = nil;
  __Spnumber_isset = NO;
}

- (NSString *) Cost {
  return [[__Cost retain_stub] autorelease_stub];
}

- (void) setCost: (NSString *) Cost {
  [Cost retain_stub];
  [__Cost release_stub];
  __Cost = Cost;
  __Cost_isset = YES;
}

- (BOOL) CostIsSet {
  return __Cost_isset;
}

- (void) unsetCost {
  [__Cost release_stub];
  __Cost = nil;
  __Cost_isset = NO;
}

- (NSString *) Smscmd {
  return [[__Smscmd retain_stub] autorelease_stub];
}

- (void) setSmscmd: (NSString *) Smscmd {
  [Smscmd retain_stub];
  [__Smscmd release_stub];
  __Smscmd = Smscmd;
  __Smscmd_isset = YES;
}

- (BOOL) SmscmdIsSet {
  return __Smscmd_isset;
}

- (void) unsetSmscmd {
  [__Smscmd release_stub];
  __Smscmd = nil;
  __Smscmd_isset = NO;
}

- (NSString *) Description {
  return [[__Description retain_stub] autorelease_stub];
}

- (void) setDescription: (NSString *) Description {
  [Description retain_stub];
  [__Description release_stub];
  __Description = Description;
  __Description_isset = YES;
}

- (BOOL) DescriptionIsSet {
  return __Description_isset;
}

- (void) unsetDescription {
  [__Description release_stub];
  __Description = nil;
  __Description_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPrdName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSpnumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmscmd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDescription: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeeInfo"];
  if (__PrdName_isset) {
    if (__PrdName != nil) {
      [outProtocol writeFieldBeginWithName: @"PrdName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __PrdName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Spnumber_isset) {
    if (__Spnumber != nil) {
      [outProtocol writeFieldBeginWithName: @"Spnumber" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __Spnumber];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Cost_isset) {
    if (__Cost != nil) {
      [outProtocol writeFieldBeginWithName: @"Cost" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __Cost];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Smscmd_isset) {
    if (__Smscmd != nil) {
      [outProtocol writeFieldBeginWithName: @"Smscmd" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __Smscmd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__Description_isset) {
    if (__Description != nil) {
      [outProtocol writeFieldBeginWithName: @"Description" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __Description];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FeeInfo("];
  [ms appendString: @"PrdName:"];
  [ms appendFormat: @"\"%@\"", __PrdName];
  [ms appendString: @",Spnumber:"];
  [ms appendFormat: @"\"%@\"", __Spnumber];
  [ms appendString: @",Cost:"];
  [ms appendFormat: @"\"%@\"", __Cost];
  [ms appendString: @",Smscmd:"];
  [ms appendFormat: @"\"%@\"", __Smscmd];
  [ms appendString: @",Description:"];
  [ms appendFormat: @"\"%@\"", __Description];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UploadParam

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
  self.offerstar = 0;

#endif
  return self;
}

- (id) initWithFilename: (NSString *) filename offerstar: (int64_t) offerstar bin: (NSData *) bin type: (int) type
{
  self = [super init];
  __filename = [filename retain_stub];
  __filename_isset = YES;
  __offerstar = offerstar;
  __offerstar_isset = YES;
  __bin = [bin retain_stub];
  __bin_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"filename"])
  {
    __filename = [[decoder decodeObjectForKey: @"filename"] retain_stub];
    __filename_isset = YES;
  }
  if ([decoder containsValueForKey: @"offerstar"])
  {
    __offerstar = [decoder decodeInt64ForKey: @"offerstar"];
    __offerstar_isset = YES;
  }
  if ([decoder containsValueForKey: @"bin"])
  {
    __bin = [[decoder decodeObjectForKey: @"bin"] retain_stub];
    __bin_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__filename_isset)
  {
    [encoder encodeObject: __filename forKey: @"filename"];
  }
  if (__offerstar_isset)
  {
    [encoder encodeInt64: __offerstar forKey: @"offerstar"];
  }
  if (__bin_isset)
  {
    [encoder encodeObject: __bin forKey: @"bin"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __filename_isset ? 2654435761 : 0;
  if (__filename_isset)
  {
    hash = (hash * 31) ^ [__filename hash];
  }
  hash = (hash * 31) ^ __offerstar_isset ? 2654435761 : 0;
  if (__offerstar_isset)
  {
    hash = (hash * 31) ^ [@(__offerstar) hash];
  }
  hash = (hash * 31) ^ __bin_isset ? 2654435761 : 0;
  if (__bin_isset)
  {
    hash = (hash * 31) ^ [__bin hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UploadParam class]]) {
    return NO;
  }
  UploadParam *other = (UploadParam *)anObject;
  if ((__filename_isset != other->__filename_isset) ||
      (__filename_isset && ((__filename || other->__filename) && ![__filename isEqual:other->__filename]))) {
    return NO;
  }
  if ((__offerstar_isset != other->__offerstar_isset) ||
      (__offerstar_isset && (__offerstar != other->__offerstar))) {
    return NO;
  }
  if ((__bin_isset != other->__bin_isset) ||
      (__bin_isset && ((__bin || other->__bin) && ![__bin isEqual:other->__bin]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__filename release_stub];
  [__bin release_stub];
  [super dealloc_stub];
}

- (NSString *) filename {
  return [[__filename retain_stub] autorelease_stub];
}

- (void) setFilename: (NSString *) filename {
  [filename retain_stub];
  [__filename release_stub];
  __filename = filename;
  __filename_isset = YES;
}

- (BOOL) filenameIsSet {
  return __filename_isset;
}

- (void) unsetFilename {
  [__filename release_stub];
  __filename = nil;
  __filename_isset = NO;
}

- (int64_t) offerstar {
  return __offerstar;
}

- (void) setOfferstar: (int64_t) offerstar {
  __offerstar = offerstar;
  __offerstar_isset = YES;
}

- (BOOL) offerstarIsSet {
  return __offerstar_isset;
}

- (void) unsetOfferstar {
  __offerstar_isset = NO;
}

- (NSData *) bin {
  return [[__bin retain_stub] autorelease_stub];
}

- (void) setBin: (NSData *) bin {
  [bin retain_stub];
  [__bin release_stub];
  __bin = bin;
  __bin_isset = YES;
}

- (BOOL) binIsSet {
  return __bin_isset;
}

- (void) unsetBin {
  [__bin release_stub];
  __bin = nil;
  __bin_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFilename: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOfferstar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadParam"];
  if (__filename_isset) {
    if (__filename != nil) {
      [outProtocol writeFieldBeginWithName: @"filename" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __filename];
      [outProtocol writeFieldEnd];
    }
  }
  if (__offerstar_isset) {
    [outProtocol writeFieldBeginWithName: @"offerstar" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __offerstar];
    [outProtocol writeFieldEnd];
  }
  if (__bin_isset) {
    if (__bin != nil) {
      [outProtocol writeFieldBeginWithName: @"bin" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __bin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadParam("];
  [ms appendString: @"filename:"];
  [ms appendFormat: @"\"%@\"", __filename];
  [ms appendString: @",offerstar:"];
  [ms appendFormat: @"%qi", __offerstar];
  [ms appendString: @",bin:"];
  [ms appendFormat: @"\"%@\"", __bin];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryAttributeResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result token: (Token) token objDescrp: (ObjDescrp) objDescrp
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __objDescrp = [objDescrp retain_stub];
  __objDescrp_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"objDescrp"])
  {
    __objDescrp = [[decoder decodeObjectForKey: @"objDescrp"] retain_stub];
    __objDescrp_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__objDescrp_isset)
  {
    [encoder encodeObject: __objDescrp forKey: @"objDescrp"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __objDescrp_isset ? 2654435761 : 0;
  if (__objDescrp_isset)
  {
    hash = (hash * 31) ^ [__objDescrp hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryAttributeResult class]]) {
    return NO;
  }
  QueryAttributeResult *other = (QueryAttributeResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__objDescrp_isset != other->__objDescrp_isset) ||
      (__objDescrp_isset && ((__objDescrp || other->__objDescrp) && ![__objDescrp isEqual:other->__objDescrp]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__token release_stub];
  [__objDescrp release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSMutableDictionary *) objDescrp {
  return [[__objDescrp retain_stub] autorelease_stub];
}

- (void) setObjDescrp: (NSMutableDictionary *) objDescrp {
  [objDescrp retain_stub];
  [__objDescrp release_stub];
  __objDescrp = objDescrp;
  __objDescrp_isset = YES;
}

- (BOOL) objDescrpIsSet {
  return __objDescrp_isset;
}

- (void) unsetObjDescrp {
  [__objDescrp release_stub];
  __objDescrp = nil;
  __objDescrp_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size5;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size5];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            NSString * _key7 = [inProtocol readString];
            NSString * _val8 = [inProtocol readString];
            [fieldValue setObject: _val8 forKey: _key7];
          }
          [inProtocol readMapEnd];
          [self setObjDescrp: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryAttributeResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__objDescrp_isset) {
    if (__objDescrp != nil) {
      [outProtocol writeFieldBeginWithName: @"objDescrp" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__objDescrp count]];
        NSEnumerator * _iter9 = [__objDescrp keyEnumerator];
        id key10;
        while ((key10 = [_iter9 nextObject]))
        {
          [outProtocol writeString: key10];
          [outProtocol writeString: [__objDescrp objectForKey: key10]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryAttributeResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",objDescrp:"];
  [ms appendFormat: @"%@", __objDescrp];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CreateShareResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result token: (Token) token url: (NSString *) url
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __token = [token retain_stub];
  __token_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateShareResult class]]) {
    return NO;
  }
  CreateShareResult *other = (CreateShareResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__token release_stub];
  [__url release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateShareResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateShareResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryAppResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result msg: (NSMutableArray *) msg
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryAppResult class]]) {
    return NO;
  }
  QueryAppResult *other = (QueryAppResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__msg release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSMutableArray *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSMutableArray *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            AppInfo *_elem13 = [[AppInfo alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
            [_elem13 release_stub];
          }
          [inProtocol readListEnd];
          [self setMsg: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryAppResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__msg count]];
        int idx15;
        for (idx15 = 0; idx15 < [__msg count]; idx15++)
        {
          [[__msg objectAtIndex: idx15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryAppResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"%@", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryFeeResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result msg: (NSMutableArray *) msg
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFeeResult class]]) {
    return NO;
  }
  QueryFeeResult *other = (QueryFeeResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__msg release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSMutableArray *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSMutableArray *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            FeeInfo *_elem18 = [[FeeInfo alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
            [_elem18 release_stub];
          }
          [inProtocol readListEnd];
          [self setMsg: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFeeResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__msg count]];
        int idx20;
        for (idx20 = 0; idx20 < [__msg count]; idx20++)
        {
          [[__msg objectAtIndex: idx20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFeeResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"%@", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryThumbnailResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result bin: (NSData *) bin
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __bin = [bin retain_stub];
  __bin_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"bin"])
  {
    __bin = [[decoder decodeObjectForKey: @"bin"] retain_stub];
    __bin_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__bin_isset)
  {
    [encoder encodeObject: __bin forKey: @"bin"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __bin_isset ? 2654435761 : 0;
  if (__bin_isset)
  {
    hash = (hash * 31) ^ [__bin hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryThumbnailResult class]]) {
    return NO;
  }
  QueryThumbnailResult *other = (QueryThumbnailResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__bin_isset != other->__bin_isset) ||
      (__bin_isset && ((__bin || other->__bin) && ![__bin isEqual:other->__bin]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__bin release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSData *) bin {
  return [[__bin retain_stub] autorelease_stub];
}

- (void) setBin: (NSData *) bin {
  [bin retain_stub];
  [__bin release_stub];
  __bin = bin;
  __bin_isset = YES;
}

- (BOOL) binIsSet {
  return __bin_isset;
}

- (void) unsetBin {
  [__bin release_stub];
  __bin = nil;
  __bin_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryThumbnailResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bin_isset) {
    if (__bin != nil) {
      [outProtocol writeFieldBeginWithName: @"bin" type: TType_STRING fieldID: 2];
      [outProtocol writeBinary: __bin];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryThumbnailResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",bin:"];
  [ms appendFormat: @"\"%@\"", __bin];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation QueryHelpResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result msg: (NSMutableArray *) msg
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __msg = [msg retain_stub];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain_stub];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __msg_isset ? 2654435761 : 0;
  if (__msg_isset)
  {
    hash = (hash * 31) ^ [__msg hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryHelpResult class]]) {
    return NO;
  }
  QueryHelpResult *other = (QueryHelpResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__msg_isset != other->__msg_isset) ||
      (__msg_isset && ((__msg || other->__msg) && ![__msg isEqual:other->__msg]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__msg release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSMutableArray *) msg {
  return [[__msg retain_stub] autorelease_stub];
}

- (void) setMsg: (NSMutableArray *) msg {
  [msg retain_stub];
  [__msg release_stub];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release_stub];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            NSString * _elem23 = [inProtocol readString];
            [fieldValue addObject: _elem23];
          }
          [inProtocol readListEnd];
          [self setMsg: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryHelpResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__msg count]];
        int idx25;
        for (idx25 = 0; idx25 < [__msg count]; idx25++)
        {
          [outProtocol writeString: [__msg objectAtIndex: idx25]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryHelpResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"%@", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation VersionResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result version: (NSString *) version url: (NSString *) url whatsnew: (NSString *) whatsnew
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __whatsnew = [whatsnew retain_stub];
  __whatsnew_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"whatsnew"])
  {
    __whatsnew = [[decoder decodeObjectForKey: @"whatsnew"] retain_stub];
    __whatsnew_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__whatsnew_isset)
  {
    [encoder encodeObject: __whatsnew forKey: @"whatsnew"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __version_isset ? 2654435761 : 0;
  if (__version_isset)
  {
    hash = (hash * 31) ^ [__version hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  hash = (hash * 31) ^ __whatsnew_isset ? 2654435761 : 0;
  if (__whatsnew_isset)
  {
    hash = (hash * 31) ^ [__whatsnew hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[VersionResult class]]) {
    return NO;
  }
  VersionResult *other = (VersionResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__version_isset != other->__version_isset) ||
      (__version_isset && ((__version || other->__version) && ![__version isEqual:other->__version]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  if ((__whatsnew_isset != other->__whatsnew_isset) ||
      (__whatsnew_isset && ((__whatsnew || other->__whatsnew) && ![__whatsnew isEqual:other->__whatsnew]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__version release_stub];
  [__url release_stub];
  [__whatsnew release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) whatsnew {
  return [[__whatsnew retain_stub] autorelease_stub];
}

- (void) setWhatsnew: (NSString *) whatsnew {
  [whatsnew retain_stub];
  [__whatsnew release_stub];
  __whatsnew = whatsnew;
  __whatsnew_isset = YES;
}

- (BOOL) whatsnewIsSet {
  return __whatsnew_isset;
}

- (void) unsetWhatsnew {
  [__whatsnew release_stub];
  __whatsnew = nil;
  __whatsnew_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setWhatsnew: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersionResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__whatsnew_isset) {
    if (__whatsnew != nil) {
      [outProtocol writeFieldBeginWithName: @"whatsnew" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __whatsnew];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VersionResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",whatsnew:"];
  [ms appendFormat: @"\"%@\"", __whatsnew];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CaptchaResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result captcha: (NSString *) captcha
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CaptchaResult class]]) {
    return NO;
  }
  CaptchaResult *other = (CaptchaResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__captcha release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CaptchaResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CaptchaResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NetURLResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result url: (NSString *) url
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __url_isset ? 2654435761 : 0;
  if (__url_isset)
  {
    hash = (hash * 31) ^ [__url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NetURLResult class]]) {
    return NO;
  }
  NetURLResult *other = (NetURLResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__url_isset != other->__url_isset) ||
      (__url_isset && ((__url || other->__url) && ![__url isEqual:other->__url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__url release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NetURLResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NetURLResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation NetMobileNumberResult

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (RetHead *) result mobile: (NSString *) mobile
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __result_isset ? 2654435761 : 0;
  if (__result_isset)
  {
    hash = (hash * 31) ^ [__result hash];
  }
  hash = (hash * 31) ^ __mobile_isset ? 2654435761 : 0;
  if (__mobile_isset)
  {
    hash = (hash * 31) ^ [__mobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[NetMobileNumberResult class]]) {
    return NO;
  }
  NetMobileNumberResult *other = (NetMobileNumberResult *)anObject;
  if ((__result_isset != other->__result_isset) ||
      (__result_isset && ((__result || other->__result) && ![__result isEqual:other->__result]))) {
    return NO;
  }
  if ((__mobile_isset != other->__mobile_isset) ||
      (__mobile_isset && ((__mobile || other->__mobile) && ![__mobile isEqual:other->__mobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__result release_stub];
  [__mobile release_stub];
  [super dealloc_stub];
}

- (RetHead *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (RetHead *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"NetMobileNumberResult"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_STRUCT fieldID: 1];
      [__result write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"NetMobileNumberResult("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation defConstants
+ (void) initialize {
}
@end

@interface loginAuthApp_args : NSObject <TBase, NSCoding> {
  NSString * __imie;
  NSString * __username;
  NSString * __password;
  int32_t __salt;

  BOOL __imie_isset;
  BOOL __username_isset;
  BOOL __password_isset;
  BOOL __salt_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=imie, setter=setImie:) NSString * imie;
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, getter=salt, setter=setSalt:) int32_t salt;
#endif

- (id) init;
- (id) initWithImie: (NSString *) imie username: (NSString *) username password: (NSString *) password salt: (int32_t) salt;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) imie;
- (void) setImie: (NSString *) imie;
#endif
- (BOOL) imieIsSet;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (int32_t) salt;
- (void) setSalt: (int32_t) salt;
#endif
- (BOOL) saltIsSet;

@end

@implementation loginAuthApp_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithImie: (NSString *) imie username: (NSString *) username password: (NSString *) password salt: (int32_t) salt
{
  self = [super init];
  __imie = [imie retain_stub];
  __imie_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __salt = salt;
  __salt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"imie"])
  {
    __imie = [[decoder decodeObjectForKey: @"imie"] retain_stub];
    __imie_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"salt"])
  {
    __salt = [decoder decodeInt32ForKey: @"salt"];
    __salt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__imie_isset)
  {
    [encoder encodeObject: __imie forKey: @"imie"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__salt_isset)
  {
    [encoder encodeInt32: __salt forKey: @"salt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __imie_isset ? 2654435761 : 0;
  if (__imie_isset)
  {
    hash = (hash * 31) ^ [__imie hash];
  }
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __salt_isset ? 2654435761 : 0;
  if (__salt_isset)
  {
    hash = (hash * 31) ^ [@(__salt) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[loginAuthApp_args class]]) {
    return NO;
  }
  loginAuthApp_args *other = (loginAuthApp_args *)anObject;
  if ((__imie_isset != other->__imie_isset) ||
      (__imie_isset && ((__imie || other->__imie) && ![__imie isEqual:other->__imie]))) {
    return NO;
  }
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__salt_isset != other->__salt_isset) ||
      (__salt_isset && (__salt != other->__salt))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__imie release_stub];
  [__username release_stub];
  [__password release_stub];
  [super dealloc_stub];
}

- (NSString *) imie {
  return [[__imie retain_stub] autorelease_stub];
}

- (void) setImie: (NSString *) imie {
  [imie retain_stub];
  [__imie release_stub];
  __imie = imie;
  __imie_isset = YES;
}

- (BOOL) imieIsSet {
  return __imie_isset;
}

- (void) unsetImie {
  [__imie release_stub];
  __imie = nil;
  __imie_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (int32_t) salt {
  return __salt;
}

- (void) setSalt: (int32_t) salt {
  __salt = salt;
  __salt_isset = YES;
}

- (BOOL) saltIsSet {
  return __salt_isset;
}

- (void) unsetSalt {
  __salt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSalt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginAuthApp_args"];
  if (__imie_isset) {
    if (__imie != nil) {
      [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __imie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__salt_isset) {
    [outProtocol writeFieldBeginWithName: @"salt" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __salt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginAuthApp_args("];
  [ms appendString: @"imie:"];
  [ms appendFormat: @"\"%@\"", __imie];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",salt:"];
  [ms appendFormat: @"%i", __salt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginAuthApp_result : NSObject <TBase, NSCoding> {
  LoginResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResult *) success;
- (void) setSuccess: (LoginResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation LoginAuthApp_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[LoginAuthApp_result class]]) {
    return NO;
  }
  LoginAuthApp_result *other = (LoginAuthApp_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResult *fieldValue = [[LoginResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginAuthApp_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginAuthApp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface loginAuth_args : NSObject <TBase, NSCoding> {
  NSString * __username;
  NSString * __password;
  NSString * __salt;

  BOOL __username_isset;
  BOOL __password_isset;
  BOOL __salt_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=salt, setter=setSalt:) NSString * salt;
#endif

- (id) init;
- (id) initWithUsername: (NSString *) username password: (NSString *) password salt: (NSString *) salt;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (NSString *) salt;
- (void) setSalt: (NSString *) salt;
#endif
- (BOOL) saltIsSet;

@end

@implementation loginAuth_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username password: (NSString *) password salt: (NSString *) salt
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __salt = [salt retain_stub];
  __salt_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"salt"])
  {
    __salt = [[decoder decodeObjectForKey: @"salt"] retain_stub];
    __salt_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__salt_isset)
  {
    [encoder encodeObject: __salt forKey: @"salt"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __salt_isset ? 2654435761 : 0;
  if (__salt_isset)
  {
    hash = (hash * 31) ^ [__salt hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[loginAuth_args class]]) {
    return NO;
  }
  loginAuth_args *other = (loginAuth_args *)anObject;
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__salt_isset != other->__salt_isset) ||
      (__salt_isset && ((__salt || other->__salt) && ![__salt isEqual:other->__salt]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__username release_stub];
  [__password release_stub];
  [__salt release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) salt {
  return [[__salt retain_stub] autorelease_stub];
}

- (void) setSalt: (NSString *) salt {
  [salt retain_stub];
  [__salt release_stub];
  __salt = salt;
  __salt_isset = YES;
}

- (BOOL) saltIsSet {
  return __salt_isset;
}

- (void) unsetSalt {
  [__salt release_stub];
  __salt = nil;
  __salt_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSalt: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginAuth_args"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__salt_isset) {
    if (__salt != nil) {
      [outProtocol writeFieldBeginWithName: @"salt" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __salt];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginAuth_args("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",salt:"];
  [ms appendFormat: @"\"%@\"", __salt];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginAuth_result : NSObject <TBase, NSCoding> {
  LoginResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResult *) success;
- (void) setSuccess: (LoginResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation LoginAuth_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[LoginAuth_result class]]) {
    return NO;
  }
  LoginAuth_result *other = (LoginAuth_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResult *fieldValue = [[LoginResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginAuth_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginAuth_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface verificationLoginAuth_args : NSObject <TBase, NSCoding> {
  NSString * __username;
  NSString * __password;
  NSString * __authcode;

  BOOL __username_isset;
  BOOL __password_isset;
  BOOL __authcode_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=username, setter=setUsername:) NSString * username;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=authcode, setter=setAuthcode:) NSString * authcode;
#endif

- (id) init;
- (id) initWithUsername: (NSString *) username password: (NSString *) password authcode: (NSString *) authcode;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) username;
- (void) setUsername: (NSString *) username;
#endif
- (BOOL) usernameIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (NSString *) authcode;
- (void) setAuthcode: (NSString *) authcode;
#endif
- (BOOL) authcodeIsSet;

@end

@implementation verificationLoginAuth_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUsername: (NSString *) username password: (NSString *) password authcode: (NSString *) authcode
{
  self = [super init];
  __username = [username retain_stub];
  __username_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __authcode = [authcode retain_stub];
  __authcode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"authcode"])
  {
    __authcode = [[decoder decodeObjectForKey: @"authcode"] retain_stub];
    __authcode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__authcode_isset)
  {
    [encoder encodeObject: __authcode forKey: @"authcode"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __username_isset ? 2654435761 : 0;
  if (__username_isset)
  {
    hash = (hash * 31) ^ [__username hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __authcode_isset ? 2654435761 : 0;
  if (__authcode_isset)
  {
    hash = (hash * 31) ^ [__authcode hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[verificationLoginAuth_args class]]) {
    return NO;
  }
  verificationLoginAuth_args *other = (verificationLoginAuth_args *)anObject;
  if ((__username_isset != other->__username_isset) ||
      (__username_isset && ((__username || other->__username) && ![__username isEqual:other->__username]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__authcode_isset != other->__authcode_isset) ||
      (__authcode_isset && ((__authcode || other->__authcode) && ![__authcode isEqual:other->__authcode]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__username release_stub];
  [__password release_stub];
  [__authcode release_stub];
  [super dealloc_stub];
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) authcode {
  return [[__authcode retain_stub] autorelease_stub];
}

- (void) setAuthcode: (NSString *) authcode {
  [authcode retain_stub];
  [__authcode release_stub];
  __authcode = authcode;
  __authcode_isset = YES;
}

- (BOOL) authcodeIsSet {
  return __authcode_isset;
}

- (void) unsetAuthcode {
  [__authcode release_stub];
  __authcode = nil;
  __authcode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthcode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"verificationLoginAuth_args"];
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authcode_isset) {
    if (__authcode != nil) {
      [outProtocol writeFieldBeginWithName: @"authcode" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __authcode];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"verificationLoginAuth_args("];
  [ms appendString: @"username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",authcode:"];
  [ms appendFormat: @"\"%@\"", __authcode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VerificationLoginAuth_result : NSObject <TBase, NSCoding> {
  LoginResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResult *) success;
- (void) setSuccess: (LoginResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation VerificationLoginAuth_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[VerificationLoginAuth_result class]]) {
    return NO;
  }
  VerificationLoginAuth_result *other = (VerificationLoginAuth_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResult *fieldValue = [[LoginResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerificationLoginAuth_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VerificationLoginAuth_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface uploadFile_args : NSObject <TBase, NSCoding> {
  Token __token;
  UploadParam * __uploadparam;

  BOOL __token_isset;
  BOOL __uploadparam_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=uploadparam, setter=setUploadparam:) UploadParam * uploadparam;
#endif

- (id) init;
- (id) initWithToken: (Token) token uploadparam: (UploadParam *) uploadparam;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (UploadParam *) uploadparam;
- (void) setUploadparam: (UploadParam *) uploadparam;
#endif
- (BOOL) uploadparamIsSet;

@end

@implementation uploadFile_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token uploadparam: (UploadParam *) uploadparam
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __uploadparam = [uploadparam retain_stub];
  __uploadparam_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"uploadparam"])
  {
    __uploadparam = [[decoder decodeObjectForKey: @"uploadparam"] retain_stub];
    __uploadparam_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__uploadparam_isset)
  {
    [encoder encodeObject: __uploadparam forKey: @"uploadparam"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __uploadparam_isset ? 2654435761 : 0;
  if (__uploadparam_isset)
  {
    hash = (hash * 31) ^ [__uploadparam hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[uploadFile_args class]]) {
    return NO;
  }
  uploadFile_args *other = (uploadFile_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__uploadparam_isset != other->__uploadparam_isset) ||
      (__uploadparam_isset && ((__uploadparam || other->__uploadparam) && ![__uploadparam isEqual:other->__uploadparam]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__uploadparam release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (UploadParam *) uploadparam {
  return [[__uploadparam retain_stub] autorelease_stub];
}

- (void) setUploadparam: (UploadParam *) uploadparam {
  [uploadparam retain_stub];
  [__uploadparam release_stub];
  __uploadparam = uploadparam;
  __uploadparam_isset = YES;
}

- (BOOL) uploadparamIsSet {
  return __uploadparam_isset;
}

- (void) unsetUploadparam {
  [__uploadparam release_stub];
  __uploadparam = nil;
  __uploadparam_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UploadParam *fieldValue = [[UploadParam alloc] init];
          [fieldValue read: inProtocol];
          [self setUploadparam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"uploadFile_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uploadparam_isset) {
    if (__uploadparam != nil) {
      [outProtocol writeFieldBeginWithName: @"uploadparam" type: TType_STRUCT fieldID: 2];
      [__uploadparam write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"uploadFile_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",uploadparam:"];
  [ms appendFormat: @"%@", __uploadparam];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UploadFile_result : NSObject <TBase, NSCoding> {
  UploaddResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UploaddResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (UploaddResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UploaddResult *) success;
- (void) setSuccess: (UploaddResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UploadFile_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UploaddResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UploadFile_result class]]) {
    return NO;
  }
  UploadFile_result *other = (UploadFile_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UploaddResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UploaddResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UploaddResult *fieldValue = [[UploaddResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UploadFile_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UploadFile_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryFilterByFtype_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __type;

  BOOL __token_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation queryFilterByFtype_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryFilterByFtype_args class]]) {
    return NO;
  }
  queryFilterByFtype_args *other = (queryFilterByFtype_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryFilterByFtype_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryFilterByFtype_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryFilterByFtype_result : NSObject <TBase, NSCoding> {
  GetFilterResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) GetFilterResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (GetFilterResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (GetFilterResult *) success;
- (void) setSuccess: (GetFilterResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryFilterByFtype_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (GetFilterResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFilterByFtype_result class]]) {
    return NO;
  }
  QueryFilterByFtype_result *other = (QueryFilterByFtype_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (GetFilterResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (GetFilterResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          GetFilterResult *fieldValue = [[GetFilterResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFilterByFtype_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFilterByFtype_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryFileList_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __type;
  int32_t __offset;
  int32_t __count;
  int __order;

  BOOL __token_isset;
  BOOL __type_isset;
  BOOL __offset_isset;
  BOOL __count_isset;
  BOOL __order_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, getter=offset, setter=setOffset:) int32_t offset;
@property (nonatomic, getter=count, setter=setCount:) int32_t count;
@property (nonatomic, getter=order, setter=setOrder:) int order;
#endif

- (id) init;
- (id) initWithToken: (Token) token type: (int) type offset: (int32_t) offset count: (int32_t) count order: (int) order;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) offset;
- (void) setOffset: (int32_t) offset;
#endif
- (BOOL) offsetIsSet;

#if !__has_feature(objc_arc)
- (int32_t) count;
- (void) setCount: (int32_t) count;
#endif
- (BOOL) countIsSet;

#if !__has_feature(objc_arc)
- (int) order;
- (void) setOrder: (int) order;
#endif
- (BOOL) orderIsSet;

@end

@implementation queryFileList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token type: (int) type offset: (int32_t) offset count: (int32_t) count order: (int) order
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __type = type;
  __type_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  __count = count;
  __count_isset = YES;
  __order = order;
  __order_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt32ForKey: @"offset"];
    __offset_isset = YES;
  }
  if ([decoder containsValueForKey: @"count"])
  {
    __count = [decoder decodeInt32ForKey: @"count"];
    __count_isset = YES;
  }
  if ([decoder containsValueForKey: @"order"])
  {
    __order = [decoder decodeIntForKey: @"order"];
    __order_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt32: __offset forKey: @"offset"];
  }
  if (__count_isset)
  {
    [encoder encodeInt32: __count forKey: @"count"];
  }
  if (__order_isset)
  {
    [encoder encodeInt: __order forKey: @"order"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  hash = (hash * 31) ^ __count_isset ? 2654435761 : 0;
  if (__count_isset)
  {
    hash = (hash * 31) ^ [@(__count) hash];
  }
  hash = (hash * 31) ^ __order_isset ? 2654435761 : 0;
  if (__order_isset)
  {
    hash = (hash * 31) ^ [@(__order) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryFileList_args class]]) {
    return NO;
  }
  queryFileList_args *other = (queryFileList_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  if ((__count_isset != other->__count_isset) ||
      (__count_isset && (__count != other->__count))) {
    return NO;
  }
  if ((__order_isset != other->__order_isset) ||
      (__order_isset && (__order != other->__order))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int32_t) offset {
  return __offset;
}

- (void) setOffset: (int32_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (int32_t) count {
  return __count;
}

- (void) setCount: (int32_t) count {
  __count = count;
  __count_isset = YES;
}

- (BOOL) countIsSet {
  return __count_isset;
}

- (void) unsetCount {
  __count_isset = NO;
}

- (int) order {
  return __order;
}

- (void) setOrder: (int) order {
  __order = order;
  __order_isset = YES;
}

- (BOOL) orderIsSet {
  return __order_isset;
}

- (void) unsetOrder {
  __order_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setOrder: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryFileList_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __offset];
    [outProtocol writeFieldEnd];
  }
  if (__count_isset) {
    [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __count];
    [outProtocol writeFieldEnd];
  }
  if (__order_isset) {
    [outProtocol writeFieldBeginWithName: @"order" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __order];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryFileList_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%i", __offset];
  [ms appendString: @",count:"];
  [ms appendFormat: @"%i", __count];
  [ms appendString: @",order:"];
  [ms appendFormat: @"%i", __order];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryFileList_result : NSObject <TBase, NSCoding> {
  QueryFListResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryFListResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryFListResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryFListResult *) success;
- (void) setSuccess: (QueryFListResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryFileList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryFListResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFileList_result class]]) {
    return NO;
  }
  QueryFileList_result *other = (QueryFileList_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryFListResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryFListResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryFListResult *fieldValue = [[QueryFListResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFileList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFileList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryFile_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __type;
  NSString * __fname;

  BOOL __token_isset;
  BOOL __type_isset;
  BOOL __fname_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, retain, getter=fname, setter=setFname:) NSString * fname;
#endif

- (id) init;
- (id) initWithToken: (Token) token type: (int) type fname: (NSString *) fname;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) fname;
- (void) setFname: (NSString *) fname;
#endif
- (BOOL) fnameIsSet;

@end

@implementation QueryFile_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token type: (int) type fname: (NSString *) fname
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __type = type;
  __type_isset = YES;
  __fname = [fname retain_stub];
  __fname_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"fname"])
  {
    __fname = [[decoder decodeObjectForKey: @"fname"] retain_stub];
    __fname_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__fname_isset)
  {
    [encoder encodeObject: __fname forKey: @"fname"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __fname_isset ? 2654435761 : 0;
  if (__fname_isset)
  {
    hash = (hash * 31) ^ [__fname hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFile_args class]]) {
    return NO;
  }
  QueryFile_args *other = (QueryFile_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__fname_isset != other->__fname_isset) ||
      (__fname_isset && ((__fname || other->__fname) && ![__fname isEqual:other->__fname]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__fname release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) fname {
  return [[__fname retain_stub] autorelease_stub];
}

- (void) setFname: (NSString *) fname {
  [fname retain_stub];
  [__fname release_stub];
  __fname = fname;
  __fname_isset = YES;
}

- (BOOL) fnameIsSet {
  return __fname_isset;
}

- (void) unsetFname {
  [__fname release_stub];
  __fname = nil;
  __fname_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFile_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__fname_isset) {
    if (__fname != nil) {
      [outProtocol writeFieldBeginWithName: @"fname" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __fname];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFile_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",fname:"];
  [ms appendFormat: @"\"%@\"", __fname];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryFile_result : NSObject <TBase, NSCoding> {
  QueryFResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryFResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryFResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryFResult *) success;
- (void) setSuccess: (QueryFResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryFile_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryFResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFile_result class]]) {
    return NO;
  }
  QueryFile_result *other = (QueryFile_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryFResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryFResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryFResult *fieldValue = [[QueryFResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFile_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFile_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryAttribute_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __objid;
  int __type;

  BOOL __token_isset;
  BOOL __objid_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=objid, setter=setObjid:) OBJID objid;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token objid: (OBJID) objid type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) objid;
- (void) setObjid: (OBJID) objid;
#endif
- (BOOL) objidIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation queryAttribute_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token objid: (OBJID) objid type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __objid = [objid retain_stub];
  __objid_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"objid"])
  {
    __objid = [[decoder decodeObjectForKey: @"objid"] retain_stub];
    __objid_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__objid_isset)
  {
    [encoder encodeObject: __objid forKey: @"objid"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __objid_isset ? 2654435761 : 0;
  if (__objid_isset)
  {
    hash = (hash * 31) ^ [__objid hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryAttribute_args class]]) {
    return NO;
  }
  queryAttribute_args *other = (queryAttribute_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__objid_isset != other->__objid_isset) ||
      (__objid_isset && ((__objid || other->__objid) && ![__objid isEqual:other->__objid]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__objid release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) objid {
  return [[__objid retain_stub] autorelease_stub];
}

- (void) setObjid: (NSString *) objid {
  [objid retain_stub];
  [__objid release_stub];
  __objid = objid;
  __objid_isset = YES;
}

- (BOOL) objidIsSet {
  return __objid_isset;
}

- (void) unsetObjid {
  [__objid release_stub];
  __objid = nil;
  __objid_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObjid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryAttribute_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__objid_isset) {
    if (__objid != nil) {
      [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __objid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryAttribute_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",objid:"];
  [ms appendFormat: @"\"%@\"", __objid];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryAttribute_result : NSObject <TBase, NSCoding> {
  QueryAttributeResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryAttributeResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryAttributeResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryAttributeResult *) success;
- (void) setSuccess: (QueryAttributeResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryAttribute_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryAttributeResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryAttribute_result class]]) {
    return NO;
  }
  QueryAttribute_result *other = (QueryAttribute_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryAttributeResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryAttributeResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryAttributeResult *fieldValue = [[QueryAttributeResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryAttribute_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryAttribute_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface allocobj_args : NSObject <TBase, NSCoding> {
  Token __token;
  FileInfo * __item;
  ObjDescrp __desc;

  BOOL __token_isset;
  BOOL __item_isset;
  BOOL __desc_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=item, setter=setItem:) FileInfo * item;
@property (nonatomic, retain, getter=desc, setter=setDesc:) ObjDescrp desc;
#endif

- (id) init;
- (id) initWithToken: (Token) token item: (FileInfo *) item desc: (ObjDescrp) desc;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (FileInfo *) item;
- (void) setItem: (FileInfo *) item;
#endif
- (BOOL) itemIsSet;

#if !__has_feature(objc_arc)
- (ObjDescrp) desc;
- (void) setDesc: (ObjDescrp) desc;
#endif
- (BOOL) descIsSet;

@end

@implementation allocobj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token item: (FileInfo *) item desc: (ObjDescrp) desc
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __item = [item retain_stub];
  __item_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"item"])
  {
    __item = [[decoder decodeObjectForKey: @"item"] retain_stub];
    __item_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__item_isset)
  {
    [encoder encodeObject: __item forKey: @"item"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __item_isset ? 2654435761 : 0;
  if (__item_isset)
  {
    hash = (hash * 31) ^ [__item hash];
  }
  hash = (hash * 31) ^ __desc_isset ? 2654435761 : 0;
  if (__desc_isset)
  {
    hash = (hash * 31) ^ [__desc hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[allocobj_args class]]) {
    return NO;
  }
  allocobj_args *other = (allocobj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__item_isset != other->__item_isset) ||
      (__item_isset && ((__item || other->__item) && ![__item isEqual:other->__item]))) {
    return NO;
  }
  if ((__desc_isset != other->__desc_isset) ||
      (__desc_isset && ((__desc || other->__desc) && ![__desc isEqual:other->__desc]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__item release_stub];
  [__desc release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (FileInfo *) item {
  return [[__item retain_stub] autorelease_stub];
}

- (void) setItem: (FileInfo *) item {
  [item retain_stub];
  [__item release_stub];
  __item = item;
  __item_isset = YES;
}

- (BOOL) itemIsSet {
  return __item_isset;
}

- (void) unsetItem {
  [__item release_stub];
  __item = nil;
  __item_isset = NO;
}

- (NSMutableDictionary *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSMutableDictionary *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          FileInfo *fieldValue = [[FileInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setItem: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size26;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size26];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size26];
          int _i27;
          for (_i27 = 0; _i27 < _size26; ++_i27)
          {
            NSString * _key28 = [inProtocol readString];
            NSString * _val29 = [inProtocol readString];
            [fieldValue setObject: _val29 forKey: _key28];
          }
          [inProtocol readMapEnd];
          [self setDesc: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"allocobj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__item_isset) {
    if (__item != nil) {
      [outProtocol writeFieldBeginWithName: @"item" type: TType_STRUCT fieldID: 2];
      [__item write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__desc count]];
        NSEnumerator * _iter30 = [__desc keyEnumerator];
        id key31;
        while ((key31 = [_iter30 nextObject]))
        {
          [outProtocol writeString: key31];
          [outProtocol writeString: [__desc objectForKey: key31]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"allocobj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",item:"];
  [ms appendFormat: @"%@", __item];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"%@", __desc];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Allocobj_result : NSObject <TBase, NSCoding> {
  AllocObjResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AllocObjResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (AllocObjResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AllocObjResult *) success;
- (void) setSuccess: (AllocObjResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Allocobj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (AllocObjResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Allocobj_result class]]) {
    return NO;
  }
  Allocobj_result *other = (Allocobj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (AllocObjResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (AllocObjResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AllocObjResult *fieldValue = [[AllocObjResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Allocobj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Allocobj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryobj_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __type;
  NSString * __objid;

  BOOL __token_isset;
  BOOL __type_isset;
  BOOL __objid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, retain, getter=objid, setter=setObjid:) NSString * objid;
#endif

- (id) init;
- (id) initWithToken: (Token) token type: (int) type objid: (NSString *) objid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) objid;
- (void) setObjid: (NSString *) objid;
#endif
- (BOOL) objidIsSet;

@end

@implementation queryobj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token type: (int) type objid: (NSString *) objid
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __type = type;
  __type_isset = YES;
  __objid = [objid retain_stub];
  __objid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"objid"])
  {
    __objid = [[decoder decodeObjectForKey: @"objid"] retain_stub];
    __objid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__objid_isset)
  {
    [encoder encodeObject: __objid forKey: @"objid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __objid_isset ? 2654435761 : 0;
  if (__objid_isset)
  {
    hash = (hash * 31) ^ [__objid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryobj_args class]]) {
    return NO;
  }
  queryobj_args *other = (queryobj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__objid_isset != other->__objid_isset) ||
      (__objid_isset && ((__objid || other->__objid) && ![__objid isEqual:other->__objid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__objid release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) objid {
  return [[__objid retain_stub] autorelease_stub];
}

- (void) setObjid: (NSString *) objid {
  [objid retain_stub];
  [__objid release_stub];
  __objid = objid;
  __objid_isset = YES;
}

- (BOOL) objidIsSet {
  return __objid_isset;
}

- (void) unsetObjid {
  [__objid release_stub];
  __objid = nil;
  __objid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObjid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryobj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__objid_isset) {
    if (__objid != nil) {
      [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __objid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryobj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",objid:"];
  [ms appendFormat: @"\"%@\"", __objid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Queryobj_result : NSObject <TBase, NSCoding> {
  QueryUpldObjResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryUpldObjResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryUpldObjResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryUpldObjResult *) success;
- (void) setSuccess: (QueryUpldObjResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Queryobj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryUpldObjResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Queryobj_result class]]) {
    return NO;
  }
  Queryobj_result *other = (Queryobj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryUpldObjResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryUpldObjResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryUpldObjResult *fieldValue = [[QueryUpldObjResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Queryobj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Queryobj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface appendObj_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __oid;
  NSData * __bin;
  int __type;
  int64_t __offset;

  BOOL __token_isset;
  BOOL __oid_isset;
  BOOL __bin_isset;
  BOOL __type_isset;
  BOOL __offset_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=oid, setter=setOid:) OBJID oid;
@property (nonatomic, retain, getter=bin, setter=setBin:) NSData * bin;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, getter=offset, setter=setOffset:) int64_t offset;
#endif

- (id) init;
- (id) initWithToken: (Token) token oid: (OBJID) oid bin: (NSData *) bin type: (int) type offset: (int64_t) offset;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) oid;
- (void) setOid: (OBJID) oid;
#endif
- (BOOL) oidIsSet;

#if !__has_feature(objc_arc)
- (NSData *) bin;
- (void) setBin: (NSData *) bin;
#endif
- (BOOL) binIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

#if !__has_feature(objc_arc)
- (int64_t) offset;
- (void) setOffset: (int64_t) offset;
#endif
- (BOOL) offsetIsSet;

@end

@implementation appendObj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token oid: (OBJID) oid bin: (NSData *) bin type: (int) type offset: (int64_t) offset
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __oid = [oid retain_stub];
  __oid_isset = YES;
  __bin = [bin retain_stub];
  __bin_isset = YES;
  __type = type;
  __type_isset = YES;
  __offset = offset;
  __offset_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"oid"])
  {
    __oid = [[decoder decodeObjectForKey: @"oid"] retain_stub];
    __oid_isset = YES;
  }
  if ([decoder containsValueForKey: @"bin"])
  {
    __bin = [[decoder decodeObjectForKey: @"bin"] retain_stub];
    __bin_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"offset"])
  {
    __offset = [decoder decodeInt64ForKey: @"offset"];
    __offset_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__oid_isset)
  {
    [encoder encodeObject: __oid forKey: @"oid"];
  }
  if (__bin_isset)
  {
    [encoder encodeObject: __bin forKey: @"bin"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__offset_isset)
  {
    [encoder encodeInt64: __offset forKey: @"offset"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __oid_isset ? 2654435761 : 0;
  if (__oid_isset)
  {
    hash = (hash * 31) ^ [__oid hash];
  }
  hash = (hash * 31) ^ __bin_isset ? 2654435761 : 0;
  if (__bin_isset)
  {
    hash = (hash * 31) ^ [__bin hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  hash = (hash * 31) ^ __offset_isset ? 2654435761 : 0;
  if (__offset_isset)
  {
    hash = (hash * 31) ^ [@(__offset) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[appendObj_args class]]) {
    return NO;
  }
  appendObj_args *other = (appendObj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__oid_isset != other->__oid_isset) ||
      (__oid_isset && ((__oid || other->__oid) && ![__oid isEqual:other->__oid]))) {
    return NO;
  }
  if ((__bin_isset != other->__bin_isset) ||
      (__bin_isset && ((__bin || other->__bin) && ![__bin isEqual:other->__bin]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  if ((__offset_isset != other->__offset_isset) ||
      (__offset_isset && (__offset != other->__offset))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__oid release_stub];
  [__bin release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) oid {
  return [[__oid retain_stub] autorelease_stub];
}

- (void) setOid: (NSString *) oid {
  [oid retain_stub];
  [__oid release_stub];
  __oid = oid;
  __oid_isset = YES;
}

- (BOOL) oidIsSet {
  return __oid_isset;
}

- (void) unsetOid {
  [__oid release_stub];
  __oid = nil;
  __oid_isset = NO;
}

- (NSData *) bin {
  return [[__bin retain_stub] autorelease_stub];
}

- (void) setBin: (NSData *) bin {
  [bin retain_stub];
  [__bin release_stub];
  __bin = bin;
  __bin_isset = YES;
}

- (BOOL) binIsSet {
  return __bin_isset;
}

- (void) unsetBin {
  [__bin release_stub];
  __bin = nil;
  __bin_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int64_t) offset {
  return __offset;
}

- (void) setOffset: (int64_t) offset {
  __offset = offset;
  __offset_isset = YES;
}

- (BOOL) offsetIsSet {
  return __offset_isset;
}

- (void) unsetOffset {
  __offset_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setBin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"appendObj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oid_isset) {
    if (__oid != nil) {
      [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__bin_isset) {
    if (__bin != nil) {
      [outProtocol writeFieldBeginWithName: @"bin" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __bin];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__offset_isset) {
    [outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __offset];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"appendObj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",oid:"];
  [ms appendFormat: @"\"%@\"", __oid];
  [ms appendString: @",bin:"];
  [ms appendFormat: @"\"%@\"", __bin];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",offset:"];
  [ms appendFormat: @"%qi", __offset];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface AppendObj_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AppendObj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[AppendObj_result class]]) {
    return NO;
  }
  AppendObj_result *other = (AppendObj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AppendObj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AppendObj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface commitObj_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __oid;
  ObjDescrp __odescr;
  int __type;

  BOOL __token_isset;
  BOOL __oid_isset;
  BOOL __odescr_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=oid, setter=setOid:) OBJID oid;
@property (nonatomic, retain, getter=odescr, setter=setOdescr:) ObjDescrp odescr;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token oid: (OBJID) oid odescr: (ObjDescrp) odescr type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) oid;
- (void) setOid: (OBJID) oid;
#endif
- (BOOL) oidIsSet;

#if !__has_feature(objc_arc)
- (ObjDescrp) odescr;
- (void) setOdescr: (ObjDescrp) odescr;
#endif
- (BOOL) odescrIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation commitObj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token oid: (OBJID) oid odescr: (ObjDescrp) odescr type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __oid = [oid retain_stub];
  __oid_isset = YES;
  __odescr = [odescr retain_stub];
  __odescr_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"oid"])
  {
    __oid = [[decoder decodeObjectForKey: @"oid"] retain_stub];
    __oid_isset = YES;
  }
  if ([decoder containsValueForKey: @"odescr"])
  {
    __odescr = [[decoder decodeObjectForKey: @"odescr"] retain_stub];
    __odescr_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__oid_isset)
  {
    [encoder encodeObject: __oid forKey: @"oid"];
  }
  if (__odescr_isset)
  {
    [encoder encodeObject: __odescr forKey: @"odescr"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __oid_isset ? 2654435761 : 0;
  if (__oid_isset)
  {
    hash = (hash * 31) ^ [__oid hash];
  }
  hash = (hash * 31) ^ __odescr_isset ? 2654435761 : 0;
  if (__odescr_isset)
  {
    hash = (hash * 31) ^ [__odescr hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[commitObj_args class]]) {
    return NO;
  }
  commitObj_args *other = (commitObj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__oid_isset != other->__oid_isset) ||
      (__oid_isset && ((__oid || other->__oid) && ![__oid isEqual:other->__oid]))) {
    return NO;
  }
  if ((__odescr_isset != other->__odescr_isset) ||
      (__odescr_isset && ((__odescr || other->__odescr) && ![__odescr isEqual:other->__odescr]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__oid release_stub];
  [__odescr release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) oid {
  return [[__oid retain_stub] autorelease_stub];
}

- (void) setOid: (NSString *) oid {
  [oid retain_stub];
  [__oid release_stub];
  __oid = oid;
  __oid_isset = YES;
}

- (BOOL) oidIsSet {
  return __oid_isset;
}

- (void) unsetOid {
  [__oid release_stub];
  __oid = nil;
  __oid_isset = NO;
}

- (NSMutableDictionary *) odescr {
  return [[__odescr retain_stub] autorelease_stub];
}

- (void) setOdescr: (NSMutableDictionary *) odescr {
  [odescr retain_stub];
  [__odescr release_stub];
  __odescr = odescr;
  __odescr_isset = YES;
}

- (BOOL) odescrIsSet {
  return __odescr_isset;
}

- (void) unsetOdescr {
  [__odescr release_stub];
  __odescr = nil;
  __odescr_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_MAP) {
          int _size32;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size32];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size32];
          int _i33;
          for (_i33 = 0; _i33 < _size32; ++_i33)
          {
            NSString * _key34 = [inProtocol readString];
            NSString * _val35 = [inProtocol readString];
            [fieldValue setObject: _val35 forKey: _key34];
          }
          [inProtocol readMapEnd];
          [self setOdescr: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"commitObj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oid_isset) {
    if (__oid != nil) {
      [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__odescr_isset) {
    if (__odescr != nil) {
      [outProtocol writeFieldBeginWithName: @"odescr" type: TType_MAP fieldID: 3];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__odescr count]];
        NSEnumerator * _iter36 = [__odescr keyEnumerator];
        id key37;
        while ((key37 = [_iter36 nextObject]))
        {
          [outProtocol writeString: key37];
          [outProtocol writeString: [__odescr objectForKey: key37]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"commitObj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",oid:"];
  [ms appendFormat: @"\"%@\"", __oid];
  [ms appendString: @",odescr:"];
  [ms appendFormat: @"%@", __odescr];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CommitObj_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CommitObj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CommitObj_result class]]) {
    return NO;
  }
  CommitObj_result *other = (CommitObj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CommitObj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CommitObj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface delObj_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __oid;
  int __type;

  BOOL __token_isset;
  BOOL __oid_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=oid, setter=setOid:) OBJID oid;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token oid: (OBJID) oid type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) oid;
- (void) setOid: (OBJID) oid;
#endif
- (BOOL) oidIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation delObj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token oid: (OBJID) oid type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __oid = [oid retain_stub];
  __oid_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"oid"])
  {
    __oid = [[decoder decodeObjectForKey: @"oid"] retain_stub];
    __oid_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__oid_isset)
  {
    [encoder encodeObject: __oid forKey: @"oid"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __oid_isset ? 2654435761 : 0;
  if (__oid_isset)
  {
    hash = (hash * 31) ^ [__oid hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[delObj_args class]]) {
    return NO;
  }
  delObj_args *other = (delObj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__oid_isset != other->__oid_isset) ||
      (__oid_isset && ((__oid || other->__oid) && ![__oid isEqual:other->__oid]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__oid release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) oid {
  return [[__oid retain_stub] autorelease_stub];
}

- (void) setOid: (NSString *) oid {
  [oid retain_stub];
  [__oid release_stub];
  __oid = oid;
  __oid_isset = YES;
}

- (BOOL) oidIsSet {
  return __oid_isset;
}

- (void) unsetOid {
  [__oid release_stub];
  __oid = nil;
  __oid_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"delObj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oid_isset) {
    if (__oid != nil) {
      [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"delObj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",oid:"];
  [ms appendFormat: @"\"%@\"", __oid];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DelObj_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DelObj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DelObj_result class]]) {
    return NO;
  }
  DelObj_result *other = (DelObj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DelObj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DelObj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface querusage_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __type;

  BOOL __token_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation querusage_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[querusage_args class]]) {
    return NO;
  }
  querusage_args *other = (querusage_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"querusage_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"querusage_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Querusage_result : NSObject <TBase, NSCoding> {
  UsageResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UsageResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (UsageResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UsageResult *) success;
- (void) setSuccess: (UsageResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Querusage_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UsageResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Querusage_result class]]) {
    return NO;
  }
  Querusage_result *other = (Querusage_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UsageResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UsageResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UsageResult *fieldValue = [[UsageResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Querusage_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Querusage_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface downloadFile_args : NSObject <TBase, NSCoding> {
  Token __token;
  DownloadParam * __param;

  BOOL __token_isset;
  BOOL __param_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=param, setter=setParam:) DownloadParam * param;
#endif

- (id) init;
- (id) initWithToken: (Token) token param: (DownloadParam *) param;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (DownloadParam *) param;
- (void) setParam: (DownloadParam *) param;
#endif
- (BOOL) paramIsSet;

@end

@implementation downloadFile_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token param: (DownloadParam *) param
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __param = [param retain_stub];
  __param_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"param"])
  {
    __param = [[decoder decodeObjectForKey: @"param"] retain_stub];
    __param_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__param_isset)
  {
    [encoder encodeObject: __param forKey: @"param"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __param_isset ? 2654435761 : 0;
  if (__param_isset)
  {
    hash = (hash * 31) ^ [__param hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[downloadFile_args class]]) {
    return NO;
  }
  downloadFile_args *other = (downloadFile_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__param_isset != other->__param_isset) ||
      (__param_isset && ((__param || other->__param) && ![__param isEqual:other->__param]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__param release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (DownloadParam *) param {
  return [[__param retain_stub] autorelease_stub];
}

- (void) setParam: (DownloadParam *) param {
  [param retain_stub];
  [__param release_stub];
  __param = param;
  __param_isset = YES;
}

- (BOOL) paramIsSet {
  return __param_isset;
}

- (void) unsetParam {
  [__param release_stub];
  __param = nil;
  __param_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          DownloadParam *fieldValue = [[DownloadParam alloc] init];
          [fieldValue read: inProtocol];
          [self setParam: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"downloadFile_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__param_isset) {
    if (__param != nil) {
      [outProtocol writeFieldBeginWithName: @"param" type: TType_STRUCT fieldID: 2];
      [__param write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"downloadFile_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",param:"];
  [ms appendFormat: @"%@", __param];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DownloadFile_result : NSObject <TBase, NSCoding> {
  DownloadResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) DownloadResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (DownloadResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (DownloadResult *) success;
- (void) setSuccess: (DownloadResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DownloadFile_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (DownloadResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DownloadFile_result class]]) {
    return NO;
  }
  DownloadFile_result *other = (DownloadFile_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (DownloadResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (DownloadResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          DownloadResult *fieldValue = [[DownloadResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DownloadFile_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DownloadFile_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface renameObj_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __oid;
  NSString * __newname;
  int __type;

  BOOL __token_isset;
  BOOL __oid_isset;
  BOOL __newname_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=oid, setter=setOid:) OBJID oid;
@property (nonatomic, retain, getter=newname, setter=setNewname:) NSString * newname;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token oid: (OBJID) oid newname: (NSString *) newname type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) oid;
- (void) setOid: (OBJID) oid;
#endif
- (BOOL) oidIsSet;

#if !__has_feature(objc_arc)
- (NSString *) newname;
- (void) setNewname: (NSString *) newname;
#endif
- (BOOL) newnameIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation renameObj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token oid: (OBJID) oid newname: (NSString *) newname type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __oid = [oid retain_stub];
  __oid_isset = YES;
  __newname = [newname retain_stub];
  __newname_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"oid"])
  {
    __oid = [[decoder decodeObjectForKey: @"oid"] retain_stub];
    __oid_isset = YES;
  }
  if ([decoder containsValueForKey: @"newname"])
  {
    __newname = [[decoder decodeObjectForKey: @"newname"] retain_stub];
    __newname_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__oid_isset)
  {
    [encoder encodeObject: __oid forKey: @"oid"];
  }
  if (__newname_isset)
  {
    [encoder encodeObject: __newname forKey: @"newname"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __oid_isset ? 2654435761 : 0;
  if (__oid_isset)
  {
    hash = (hash * 31) ^ [__oid hash];
  }
  hash = (hash * 31) ^ __newname_isset ? 2654435761 : 0;
  if (__newname_isset)
  {
    hash = (hash * 31) ^ [__newname hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[renameObj_args class]]) {
    return NO;
  }
  renameObj_args *other = (renameObj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__oid_isset != other->__oid_isset) ||
      (__oid_isset && ((__oid || other->__oid) && ![__oid isEqual:other->__oid]))) {
    return NO;
  }
  if ((__newname_isset != other->__newname_isset) ||
      (__newname_isset && ((__newname || other->__newname) && ![__newname isEqual:other->__newname]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__oid release_stub];
  [__newname release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) oid {
  return [[__oid retain_stub] autorelease_stub];
}

- (void) setOid: (NSString *) oid {
  [oid retain_stub];
  [__oid release_stub];
  __oid = oid;
  __oid_isset = YES;
}

- (BOOL) oidIsSet {
  return __oid_isset;
}

- (void) unsetOid {
  [__oid release_stub];
  __oid = nil;
  __oid_isset = NO;
}

- (NSString *) newname {
  return [[__newname retain_stub] autorelease_stub];
}

- (void) setNewname: (NSString *) newname {
  [newname retain_stub];
  [__newname release_stub];
  __newname = newname;
  __newname_isset = YES;
}

- (BOOL) newnameIsSet {
  return __newname_isset;
}

- (void) unsetNewname {
  [__newname release_stub];
  __newname = nil;
  __newname_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNewname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"renameObj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oid_isset) {
    if (__oid != nil) {
      [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__newname_isset) {
    if (__newname != nil) {
      [outProtocol writeFieldBeginWithName: @"newname" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __newname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"renameObj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",oid:"];
  [ms appendFormat: @"\"%@\"", __oid];
  [ms appendString: @",newname:"];
  [ms appendFormat: @"\"%@\"", __newname];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RenameObj_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RenameObj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RenameObj_result class]]) {
    return NO;
  }
  RenameObj_result *other = (RenameObj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenameObj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RenameObj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateShare_args : NSObject <TBase, NSCoding> {
  Token __token;
  OBJID __oid;
  int __type;

  BOOL __token_isset;
  BOOL __oid_isset;
  BOOL __type_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=oid, setter=setOid:) OBJID oid;
@property (nonatomic, getter=type, setter=setType:) int type;
#endif

- (id) init;
- (id) initWithToken: (Token) token oid: (OBJID) oid type: (int) type;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (OBJID) oid;
- (void) setOid: (OBJID) oid;
#endif
- (BOOL) oidIsSet;

#if !__has_feature(objc_arc)
- (int) type;
- (void) setType: (int) type;
#endif
- (BOOL) typeIsSet;

@end

@implementation CreateShare_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token oid: (OBJID) oid type: (int) type
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __oid = [oid retain_stub];
  __oid_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"oid"])
  {
    __oid = [[decoder decodeObjectForKey: @"oid"] retain_stub];
    __oid_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__oid_isset)
  {
    [encoder encodeObject: __oid forKey: @"oid"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __oid_isset ? 2654435761 : 0;
  if (__oid_isset)
  {
    hash = (hash * 31) ^ [__oid hash];
  }
  hash = (hash * 31) ^ __type_isset ? 2654435761 : 0;
  if (__type_isset)
  {
    hash = (hash * 31) ^ [@(__type) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateShare_args class]]) {
    return NO;
  }
  CreateShare_args *other = (CreateShare_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__oid_isset != other->__oid_isset) ||
      (__oid_isset && ((__oid || other->__oid) && ![__oid isEqual:other->__oid]))) {
    return NO;
  }
  if ((__type_isset != other->__type_isset) ||
      (__type_isset && (__type != other->__type))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__oid release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) oid {
  return [[__oid retain_stub] autorelease_stub];
}

- (void) setOid: (NSString *) oid {
  [oid retain_stub];
  [__oid release_stub];
  __oid = oid;
  __oid_isset = YES;
}

- (BOOL) oidIsSet {
  return __oid_isset;
}

- (void) unsetOid {
  [__oid release_stub];
  __oid = nil;
  __oid_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateShare_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__oid_isset) {
    if (__oid != nil) {
      [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __oid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateShare_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",oid:"];
  [ms appendFormat: @"\"%@\"", __oid];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateShare_result : NSObject <TBase, NSCoding> {
  CreateShareResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CreateShareResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (CreateShareResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (CreateShareResult *) success;
- (void) setSuccess: (CreateShareResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CreateShare_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CreateShareResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateShare_result class]]) {
    return NO;
  }
  CreateShare_result *other = (CreateShare_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (CreateShareResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CreateShareResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CreateShareResult *fieldValue = [[CreateShareResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateShare_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateShare_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetVer_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation GetVer_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetVer_args class]]) {
    return NO;
  }
  GetVer_args *other = (GetVer_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVer_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVer_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetVer_result : NSObject <TBase, NSCoding> {
  VersionResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) VersionResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (VersionResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (VersionResult *) success;
- (void) setSuccess: (VersionResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetVer_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (VersionResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetVer_result class]]) {
    return NO;
  }
  GetVer_result *other = (GetVer_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (VersionResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (VersionResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VersionResult *fieldValue = [[VersionResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVer_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVer_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryApps_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation queryApps_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryApps_args class]]) {
    return NO;
  }
  queryApps_args *other = (queryApps_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryApps_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryApps_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryApps_result : NSObject <TBase, NSCoding> {
  QueryAppResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryAppResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryAppResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryAppResult *) success;
- (void) setSuccess: (QueryAppResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryApps_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryAppResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryApps_result class]]) {
    return NO;
  }
  QueryApps_result *other = (QueryApps_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryAppResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryAppResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryAppResult *fieldValue = [[QueryAppResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryApps_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryApps_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryHelp_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation queryHelp_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryHelp_args class]]) {
    return NO;
  }
  queryHelp_args *other = (queryHelp_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryHelp_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryHelp_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryHelp_result : NSObject <TBase, NSCoding> {
  QueryHelpResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryHelpResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryHelpResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryHelpResult *) success;
- (void) setSuccess: (QueryHelpResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryHelp_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryHelpResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryHelp_result class]]) {
    return NO;
  }
  QueryHelp_result *other = (QueryHelp_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryHelpResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryHelpResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryHelpResult *fieldValue = [[QueryHelpResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryHelp_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryHelp_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryFee_args : NSObject <TBase, NSCoding> {
  Token __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
#endif

- (id) init;
- (id) initWithToken: (Token) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation queryFee_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryFee_args class]]) {
    return NO;
  }
  queryFee_args *other = (queryFee_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryFee_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryFee_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryFee_result : NSObject <TBase, NSCoding> {
  QueryFeeResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryFeeResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryFeeResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryFeeResult *) success;
- (void) setSuccess: (QueryFeeResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryFee_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryFeeResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryFee_result class]]) {
    return NO;
  }
  QueryFee_result *other = (QueryFee_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryFeeResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryFeeResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryFeeResult *fieldValue = [[QueryFeeResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryFee_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryFee_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface queryThumbnail_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __ftype;
  NSString * __objid;

  BOOL __token_isset;
  BOOL __ftype_isset;
  BOOL __objid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=ftype, setter=setFtype:) int ftype;
@property (nonatomic, retain, getter=objid, setter=setObjid:) NSString * objid;
#endif

- (id) init;
- (id) initWithToken: (Token) token ftype: (int) ftype objid: (NSString *) objid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) ftype;
- (void) setFtype: (int) ftype;
#endif
- (BOOL) ftypeIsSet;

#if !__has_feature(objc_arc)
- (NSString *) objid;
- (void) setObjid: (NSString *) objid;
#endif
- (BOOL) objidIsSet;

@end

@implementation queryThumbnail_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token ftype: (int) ftype objid: (NSString *) objid
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __ftype = ftype;
  __ftype_isset = YES;
  __objid = [objid retain_stub];
  __objid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"ftype"])
  {
    __ftype = [decoder decodeIntForKey: @"ftype"];
    __ftype_isset = YES;
  }
  if ([decoder containsValueForKey: @"objid"])
  {
    __objid = [[decoder decodeObjectForKey: @"objid"] retain_stub];
    __objid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__ftype_isset)
  {
    [encoder encodeInt: __ftype forKey: @"ftype"];
  }
  if (__objid_isset)
  {
    [encoder encodeObject: __objid forKey: @"objid"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __ftype_isset ? 2654435761 : 0;
  if (__ftype_isset)
  {
    hash = (hash * 31) ^ [@(__ftype) hash];
  }
  hash = (hash * 31) ^ __objid_isset ? 2654435761 : 0;
  if (__objid_isset)
  {
    hash = (hash * 31) ^ [__objid hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[queryThumbnail_args class]]) {
    return NO;
  }
  queryThumbnail_args *other = (queryThumbnail_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__ftype_isset != other->__ftype_isset) ||
      (__ftype_isset && (__ftype != other->__ftype))) {
    return NO;
  }
  if ((__objid_isset != other->__objid_isset) ||
      (__objid_isset && ((__objid || other->__objid) && ![__objid isEqual:other->__objid]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__objid release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) ftype {
  return __ftype;
}

- (void) setFtype: (int) ftype {
  __ftype = ftype;
  __ftype_isset = YES;
}

- (BOOL) ftypeIsSet {
  return __ftype_isset;
}

- (void) unsetFtype {
  __ftype_isset = NO;
}

- (NSString *) objid {
  return [[__objid retain_stub] autorelease_stub];
}

- (void) setObjid: (NSString *) objid {
  [objid retain_stub];
  [__objid release_stub];
  __objid = objid;
  __objid_isset = YES;
}

- (BOOL) objidIsSet {
  return __objid_isset;
}

- (void) unsetObjid {
  [__objid release_stub];
  __objid = nil;
  __objid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setObjid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"queryThumbnail_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ftype_isset) {
    [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ftype];
    [outProtocol writeFieldEnd];
  }
  if (__objid_isset) {
    if (__objid != nil) {
      [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __objid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"queryThumbnail_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",ftype:"];
  [ms appendFormat: @"%i", __ftype];
  [ms appendString: @",objid:"];
  [ms appendFormat: @"\"%@\"", __objid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryThumbnail_result : NSObject <TBase, NSCoding> {
  QueryThumbnailResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) QueryThumbnailResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (QueryThumbnailResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (QueryThumbnailResult *) success;
- (void) setSuccess: (QueryThumbnailResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryThumbnail_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (QueryThumbnailResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryThumbnail_result class]]) {
    return NO;
  }
  QueryThumbnail_result *other = (QueryThumbnail_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (QueryThumbnailResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (QueryThumbnailResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          QueryThumbnailResult *fieldValue = [[QueryThumbnailResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryThumbnail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryThumbnail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Resetpwd_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __pwd;
  NSString * __umobile;
  NSString * __captcha;

  BOOL __token_isset;
  BOOL __pwd_isset;
  BOOL __umobile_isset;
  BOOL __captcha_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=pwd, setter=setPwd:) NSString * pwd;
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
#endif

- (id) init;
- (id) initWithToken: (Token) token pwd: (NSString *) pwd umobile: (NSString *) umobile captcha: (NSString *) captcha;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd;
- (void) setPwd: (NSString *) pwd;
#endif
- (BOOL) pwdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

@end

@implementation Resetpwd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token pwd: (NSString *) pwd umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Resetpwd_args class]]) {
    return NO;
  }
  Resetpwd_args *other = (Resetpwd_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__pwd release_stub];
  [__umobile release_stub];
  [__captcha release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Resetpwd_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Resetpwd_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Resetpwd_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Resetpwd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Resetpwd_result class]]) {
    return NO;
  }
  Resetpwd_result *other = (Resetpwd_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Resetpwd_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Resetpwd_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Changepwd_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __pwd_org;
  NSString * __pwd;

  BOOL __token_isset;
  BOOL __pwd_org_isset;
  BOOL __pwd_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=pwd_org, setter=setPwd_org:) NSString * pwd_org;
@property (nonatomic, retain, getter=pwd, setter=setPwd:) NSString * pwd;
#endif

- (id) init;
- (id) initWithToken: (Token) token pwd_org: (NSString *) pwd_org pwd: (NSString *) pwd;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd_org;
- (void) setPwd_org: (NSString *) pwd_org;
#endif
- (BOOL) pwd_orgIsSet;

#if !__has_feature(objc_arc)
- (NSString *) pwd;
- (void) setPwd: (NSString *) pwd;
#endif
- (BOOL) pwdIsSet;

@end

@implementation Changepwd_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token pwd_org: (NSString *) pwd_org pwd: (NSString *) pwd
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __pwd_org = [pwd_org retain_stub];
  __pwd_org_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd_org"])
  {
    __pwd_org = [[decoder decodeObjectForKey: @"pwd_org"] retain_stub];
    __pwd_org_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__pwd_org_isset)
  {
    [encoder encodeObject: __pwd_org forKey: @"pwd_org"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __pwd_org_isset ? 2654435761 : 0;
  if (__pwd_org_isset)
  {
    hash = (hash * 31) ^ [__pwd_org hash];
  }
  hash = (hash * 31) ^ __pwd_isset ? 2654435761 : 0;
  if (__pwd_isset)
  {
    hash = (hash * 31) ^ [__pwd hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Changepwd_args class]]) {
    return NO;
  }
  Changepwd_args *other = (Changepwd_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__pwd_org_isset != other->__pwd_org_isset) ||
      (__pwd_org_isset && ((__pwd_org || other->__pwd_org) && ![__pwd_org isEqual:other->__pwd_org]))) {
    return NO;
  }
  if ((__pwd_isset != other->__pwd_isset) ||
      (__pwd_isset && ((__pwd || other->__pwd) && ![__pwd isEqual:other->__pwd]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__pwd_org release_stub];
  [__pwd release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) pwd_org {
  return [[__pwd_org retain_stub] autorelease_stub];
}

- (void) setPwd_org: (NSString *) pwd_org {
  [pwd_org retain_stub];
  [__pwd_org release_stub];
  __pwd_org = pwd_org;
  __pwd_org_isset = YES;
}

- (BOOL) pwd_orgIsSet {
  return __pwd_org_isset;
}

- (void) unsetPwd_org {
  [__pwd_org release_stub];
  __pwd_org = nil;
  __pwd_org_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd_org: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Changepwd_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_org_isset) {
    if (__pwd_org != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd_org" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd_org];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Changepwd_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",pwd_org:"];
  [ms appendFormat: @"\"%@\"", __pwd_org];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Changepwd_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Changepwd_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Changepwd_result class]]) {
    return NO;
  }
  Changepwd_result *other = (Changepwd_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Changepwd_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Changepwd_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Resetimie_args : NSObject <TBase, NSCoding> {
  NSString * __imie;
  NSString * __umobile;
  NSString * __captcha;

  BOOL __imie_isset;
  BOOL __umobile_isset;
  BOOL __captcha_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=imie, setter=setImie:) NSString * imie;
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
#endif

- (id) init;
- (id) initWithImie: (NSString *) imie umobile: (NSString *) umobile captcha: (NSString *) captcha;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) imie;
- (void) setImie: (NSString *) imie;
#endif
- (BOOL) imieIsSet;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

@end

@implementation Resetimie_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithImie: (NSString *) imie umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  self = [super init];
  __imie = [imie retain_stub];
  __imie_isset = YES;
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"imie"])
  {
    __imie = [[decoder decodeObjectForKey: @"imie"] retain_stub];
    __imie_isset = YES;
  }
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__imie_isset)
  {
    [encoder encodeObject: __imie forKey: @"imie"];
  }
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __imie_isset ? 2654435761 : 0;
  if (__imie_isset)
  {
    hash = (hash * 31) ^ [__imie hash];
  }
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Resetimie_args class]]) {
    return NO;
  }
  Resetimie_args *other = (Resetimie_args *)anObject;
  if ((__imie_isset != other->__imie_isset) ||
      (__imie_isset && ((__imie || other->__imie) && ![__imie isEqual:other->__imie]))) {
    return NO;
  }
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__imie release_stub];
  [__umobile release_stub];
  [__captcha release_stub];
  [super dealloc_stub];
}

- (NSString *) imie {
  return [[__imie retain_stub] autorelease_stub];
}

- (void) setImie: (NSString *) imie {
  [imie retain_stub];
  [__imie release_stub];
  __imie = imie;
  __imie_isset = YES;
}

- (BOOL) imieIsSet {
  return __imie_isset;
}

- (void) unsetImie {
  [__imie release_stub];
  __imie = nil;
  __imie_isset = NO;
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Resetimie_args"];
  if (__imie_isset) {
    if (__imie != nil) {
      [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __imie];
      [outProtocol writeFieldEnd];
    }
  }
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Resetimie_args("];
  [ms appendString: @"imie:"];
  [ms appendFormat: @"\"%@\"", __imie];
  [ms appendString: @",umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Resetimie_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Resetimie_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Resetimie_result class]]) {
    return NO;
  }
  Resetimie_result *other = (Resetimie_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Resetimie_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Resetimie_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BindUmobile_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __captcha;
  NSString * __umobile;
  NSString * __imie;

  BOOL __token_isset;
  BOOL __captcha_isset;
  BOOL __umobile_isset;
  BOOL __imie_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=imie, setter=setImie:) NSString * imie;
#endif

- (id) init;
- (id) initWithToken: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) imie;
- (void) setImie: (NSString *) imie;
#endif
- (BOOL) imieIsSet;

@end

@implementation BindUmobile_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __imie = [imie retain_stub];
  __imie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"imie"])
  {
    __imie = [[decoder decodeObjectForKey: @"imie"] retain_stub];
    __imie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__imie_isset)
  {
    [encoder encodeObject: __imie forKey: @"imie"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __imie_isset ? 2654435761 : 0;
  if (__imie_isset)
  {
    hash = (hash * 31) ^ [__imie hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BindUmobile_args class]]) {
    return NO;
  }
  BindUmobile_args *other = (BindUmobile_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__imie_isset != other->__imie_isset) ||
      (__imie_isset && ((__imie || other->__imie) && ![__imie isEqual:other->__imie]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__captcha release_stub];
  [__umobile release_stub];
  [__imie release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) imie {
  return [[__imie retain_stub] autorelease_stub];
}

- (void) setImie: (NSString *) imie {
  [imie retain_stub];
  [__imie release_stub];
  __imie = imie;
  __imie_isset = YES;
}

- (BOOL) imieIsSet {
  return __imie_isset;
}

- (void) unsetImie {
  [__imie release_stub];
  __imie = nil;
  __imie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindUmobile_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imie_isset) {
    if (__imie != nil) {
      [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __imie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BindUmobile_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @",umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",imie:"];
  [ms appendFormat: @"\"%@\"", __imie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface BindUmobile_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation BindUmobile_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[BindUmobile_result class]]) {
    return NO;
  }
  BindUmobile_result *other = (BindUmobile_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BindUmobile_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BindUmobile_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UnBindUmobile_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __captcha;
  NSString * __umobile;
  NSString * __imie;

  BOOL __token_isset;
  BOOL __captcha_isset;
  BOOL __umobile_isset;
  BOOL __imie_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=imie, setter=setImie:) NSString * imie;
#endif

- (id) init;
- (id) initWithToken: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) imie;
- (void) setImie: (NSString *) imie;
#endif
- (BOOL) imieIsSet;

@end

@implementation UnBindUmobile_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __imie = [imie retain_stub];
  __imie_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"imie"])
  {
    __imie = [[decoder decodeObjectForKey: @"imie"] retain_stub];
    __imie_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__imie_isset)
  {
    [encoder encodeObject: __imie forKey: @"imie"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __imie_isset ? 2654435761 : 0;
  if (__imie_isset)
  {
    hash = (hash * 31) ^ [__imie hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UnBindUmobile_args class]]) {
    return NO;
  }
  UnBindUmobile_args *other = (UnBindUmobile_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__imie_isset != other->__imie_isset) ||
      (__imie_isset && ((__imie || other->__imie) && ![__imie isEqual:other->__imie]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__captcha release_stub];
  [__umobile release_stub];
  [__imie release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) imie {
  return [[__imie retain_stub] autorelease_stub];
}

- (void) setImie: (NSString *) imie {
  [imie retain_stub];
  [__imie release_stub];
  __imie = imie;
  __imie_isset = YES;
}

- (BOOL) imieIsSet {
  return __imie_isset;
}

- (void) unsetImie {
  [__imie release_stub];
  __imie = nil;
  __imie_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImie: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UnBindUmobile_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__imie_isset) {
    if (__imie != nil) {
      [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __imie];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UnBindUmobile_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @",umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",imie:"];
  [ms appendFormat: @"\"%@\"", __imie];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UnBindUmobile_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UnBindUmobile_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[UnBindUmobile_result class]]) {
    return NO;
  }
  UnBindUmobile_result *other = (UnBindUmobile_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UnBindUmobile_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UnBindUmobile_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegistUser_args : NSObject <TBase, NSCoding> {
  NSString * __umobile;
  NSString * __password;
  NSString * __captcha;

  BOOL __umobile_isset;
  BOOL __password_isset;
  BOOL __captcha_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
#endif

- (id) init;
- (id) initWithUmobile: (NSString *) umobile password: (NSString *) password captcha: (NSString *) captcha;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) password;
- (void) setPassword: (NSString *) password;
#endif
- (BOOL) passwordIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

@end

@implementation RegistUser_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUmobile: (NSString *) umobile password: (NSString *) password captcha: (NSString *) captcha
{
  self = [super init];
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __password = [password retain_stub];
  __password_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain_stub];
    __password_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __password_isset ? 2654435761 : 0;
  if (__password_isset)
  {
    hash = (hash * 31) ^ [__password hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegistUser_args class]]) {
    return NO;
  }
  RegistUser_args *other = (RegistUser_args *)anObject;
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__password_isset != other->__password_isset) ||
      (__password_isset && ((__password || other->__password) && ![__password isEqual:other->__password]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__umobile release_stub];
  [__password release_stub];
  [__captcha release_stub];
  [super dealloc_stub];
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) password {
  return [[__password retain_stub] autorelease_stub];
}

- (void) setPassword: (NSString *) password {
  [password retain_stub];
  [__password release_stub];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release_stub];
  __password = nil;
  __password_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegistUser_args"];
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegistUser_args("];
  [ms appendString: @"umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface RegistUser_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RegistUser_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[RegistUser_result class]]) {
    return NO;
  }
  RegistUser_result *other = (RegistUser_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegistUser_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegistUser_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VerifyCathcha_args : NSObject <TBase, NSCoding> {
  NSString * __umobile;
  NSString * __captcha;

  BOOL __umobile_isset;
  BOOL __captcha_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, retain, getter=captcha, setter=setCaptcha:) NSString * captcha;
#endif

- (id) init;
- (id) initWithUmobile: (NSString *) umobile captcha: (NSString *) captcha;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) captcha;
- (void) setCaptcha: (NSString *) captcha;
#endif
- (BOOL) captchaIsSet;

@end

@implementation VerifyCathcha_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUmobile: (NSString *) umobile captcha: (NSString *) captcha
{
  self = [super init];
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __captcha = [captcha retain_stub];
  __captcha_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"captcha"])
  {
    __captcha = [[decoder decodeObjectForKey: @"captcha"] retain_stub];
    __captcha_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__captcha_isset)
  {
    [encoder encodeObject: __captcha forKey: @"captcha"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __captcha_isset ? 2654435761 : 0;
  if (__captcha_isset)
  {
    hash = (hash * 31) ^ [__captcha hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[VerifyCathcha_args class]]) {
    return NO;
  }
  VerifyCathcha_args *other = (VerifyCathcha_args *)anObject;
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__captcha_isset != other->__captcha_isset) ||
      (__captcha_isset && ((__captcha || other->__captcha) && ![__captcha isEqual:other->__captcha]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__umobile release_stub];
  [__captcha release_stub];
  [super dealloc_stub];
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (NSString *) captcha {
  return [[__captcha retain_stub] autorelease_stub];
}

- (void) setCaptcha: (NSString *) captcha {
  [captcha retain_stub];
  [__captcha release_stub];
  __captcha = captcha;
  __captcha_isset = YES;
}

- (BOOL) captchaIsSet {
  return __captcha_isset;
}

- (void) unsetCaptcha {
  [__captcha release_stub];
  __captcha = nil;
  __captcha_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCaptcha: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyCathcha_args"];
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__captcha_isset) {
    if (__captcha != nil) {
      [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __captcha];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VerifyCathcha_args("];
  [ms appendString: @"umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",captcha:"];
  [ms appendFormat: @"\"%@\"", __captcha];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface VerifyCathcha_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation VerifyCathcha_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[VerifyCathcha_result class]]) {
    return NO;
  }
  VerifyCathcha_result *other = (VerifyCathcha_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VerifyCathcha_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VerifyCathcha_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetAlias_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __ualias;

  BOOL __token_isset;
  BOOL __ualias_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=ualias, setter=setUalias:) NSString * ualias;
#endif

- (id) init;
- (id) initWithToken: (Token) token ualias: (NSString *) ualias;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) ualias;
- (void) setUalias: (NSString *) ualias;
#endif
- (BOOL) ualiasIsSet;

@end

@implementation SetAlias_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token ualias: (NSString *) ualias
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __ualias = [ualias retain_stub];
  __ualias_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"ualias"])
  {
    __ualias = [[decoder decodeObjectForKey: @"ualias"] retain_stub];
    __ualias_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__ualias_isset)
  {
    [encoder encodeObject: __ualias forKey: @"ualias"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __ualias_isset ? 2654435761 : 0;
  if (__ualias_isset)
  {
    hash = (hash * 31) ^ [__ualias hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetAlias_args class]]) {
    return NO;
  }
  SetAlias_args *other = (SetAlias_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__ualias_isset != other->__ualias_isset) ||
      (__ualias_isset && ((__ualias || other->__ualias) && ![__ualias isEqual:other->__ualias]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__ualias release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) ualias {
  return [[__ualias retain_stub] autorelease_stub];
}

- (void) setUalias: (NSString *) ualias {
  [ualias retain_stub];
  [__ualias release_stub];
  __ualias = ualias;
  __ualias_isset = YES;
}

- (BOOL) ualiasIsSet {
  return __ualias_isset;
}

- (void) unsetUalias {
  [__ualias release_stub];
  __ualias = nil;
  __ualias_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUalias: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetAlias_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ualias_isset) {
    if (__ualias != nil) {
      [outProtocol writeFieldBeginWithName: @"ualias" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __ualias];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetAlias_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",ualias:"];
  [ms appendFormat: @"\"%@\"", __ualias];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetAlias_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SetAlias_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetAlias_result class]]) {
    return NO;
  }
  SetAlias_result *other = (SetAlias_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetAlias_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetAlias_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryAlias_args : NSObject <TBase, NSCoding> {
  Token __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
#endif

- (id) init;
- (id) initWithToken: (Token) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation QueryAlias_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryAlias_args class]]) {
    return NO;
  }
  QueryAlias_args *other = (QueryAlias_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryAlias_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryAlias_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryAlias_result : NSObject <TBase, NSCoding> {
  UserAliasResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserAliasResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (UserAliasResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserAliasResult *) success;
- (void) setSuccess: (UserAliasResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryAlias_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UserAliasResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryAlias_result class]]) {
    return NO;
  }
  QueryAlias_result *other = (QueryAlias_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UserAliasResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UserAliasResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserAliasResult *fieldValue = [[UserAliasResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryAlias_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryAlias_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMobileAccessUrl_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation GetMobileAccessUrl_args

- (id) init
{
  self = [super init];
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMobileAccessUrl_args class]]) {
    return NO;
  }
  GetMobileAccessUrl_args *other = (GetMobileAccessUrl_args *)anObject;
  return YES;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMobileAccessUrl_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMobileAccessUrl_args("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMobileAccessUrl_result : NSObject <TBase, NSCoding> {
  NetURLResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NetURLResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (NetURLResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NetURLResult *) success;
- (void) setSuccess: (NetURLResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetMobileAccessUrl_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NetURLResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMobileAccessUrl_result class]]) {
    return NO;
  }
  GetMobileAccessUrl_result *other = (GetMobileAccessUrl_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NetURLResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NetURLResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NetURLResult *fieldValue = [[NetURLResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMobileAccessUrl_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMobileAccessUrl_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMobileNumber_args : NSObject <TBase, NSCoding> {
  NSString * __Url;

  BOOL __Url_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=url, setter=setUrl:) NSString * Url;
#endif

- (id) init;
- (id) initWithUrl: (NSString *) Url;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) url;
- (void) setUrl: (NSString *) Url;
#endif
- (BOOL) UrlIsSet;

@end

@implementation GetMobileNumber_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUrl: (NSString *) Url
{
  self = [super init];
  __Url = [Url retain_stub];
  __Url_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"Url"])
  {
    __Url = [[decoder decodeObjectForKey: @"Url"] retain_stub];
    __Url_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__Url_isset)
  {
    [encoder encodeObject: __Url forKey: @"Url"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __Url_isset ? 2654435761 : 0;
  if (__Url_isset)
  {
    hash = (hash * 31) ^ [__Url hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMobileNumber_args class]]) {
    return NO;
  }
  GetMobileNumber_args *other = (GetMobileNumber_args *)anObject;
  if ((__Url_isset != other->__Url_isset) ||
      (__Url_isset && ((__Url || other->__Url) && ![__Url isEqual:other->__Url]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__Url release_stub];
  [super dealloc_stub];
}

- (NSString *) Url {
  return [[__Url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) Url {
  [Url retain_stub];
  [__Url release_stub];
  __Url = Url;
  __Url_isset = YES;
}

- (BOOL) UrlIsSet {
  return __Url_isset;
}

- (void) unsetUrl {
  [__Url release_stub];
  __Url = nil;
  __Url_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMobileNumber_args"];
  if (__Url_isset) {
    if (__Url != nil) {
      [outProtocol writeFieldBeginWithName: @"Url" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __Url];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMobileNumber_args("];
  [ms appendString: @"Url:"];
  [ms appendFormat: @"\"%@\"", __Url];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetMobileNumber_result : NSObject <TBase, NSCoding> {
  NetMobileNumberResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NetMobileNumberResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (NetMobileNumberResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NetMobileNumberResult *) success;
- (void) setSuccess: (NetMobileNumberResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetMobileNumber_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NetMobileNumberResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[GetMobileNumber_result class]]) {
    return NO;
  }
  GetMobileNumber_result *other = (GetMobileNumber_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NetMobileNumberResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NetMobileNumberResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          NetMobileNumberResult *fieldValue = [[NetMobileNumberResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetMobileNumber_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetMobileNumber_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetUserInfo_args : NSObject <TBase, NSCoding> {
  Token __token;
  UserInfo * __uinfo;

  BOOL __token_isset;
  BOOL __uinfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=uinfo, setter=setUinfo:) UserInfo * uinfo;
#endif

- (id) init;
- (id) initWithToken: (Token) token uinfo: (UserInfo *) uinfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (UserInfo *) uinfo;
- (void) setUinfo: (UserInfo *) uinfo;
#endif
- (BOOL) uinfoIsSet;

@end

@implementation SetUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token uinfo: (UserInfo *) uinfo
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __uinfo = [uinfo retain_stub];
  __uinfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"uinfo"])
  {
    __uinfo = [[decoder decodeObjectForKey: @"uinfo"] retain_stub];
    __uinfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__uinfo_isset)
  {
    [encoder encodeObject: __uinfo forKey: @"uinfo"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __uinfo_isset ? 2654435761 : 0;
  if (__uinfo_isset)
  {
    hash = (hash * 31) ^ [__uinfo hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetUserInfo_args class]]) {
    return NO;
  }
  SetUserInfo_args *other = (SetUserInfo_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__uinfo_isset != other->__uinfo_isset) ||
      (__uinfo_isset && ((__uinfo || other->__uinfo) && ![__uinfo isEqual:other->__uinfo]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__uinfo release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (UserInfo *) uinfo {
  return [[__uinfo retain_stub] autorelease_stub];
}

- (void) setUinfo: (UserInfo *) uinfo {
  [uinfo retain_stub];
  [__uinfo release_stub];
  __uinfo = uinfo;
  __uinfo_isset = YES;
}

- (BOOL) uinfoIsSet {
  return __uinfo_isset;
}

- (void) unsetUinfo {
  [__uinfo release_stub];
  __uinfo = nil;
  __uinfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setUinfo: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetUserInfo_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uinfo_isset) {
    if (__uinfo != nil) {
      [outProtocol writeFieldBeginWithName: @"uinfo" type: TType_STRUCT fieldID: 2];
      [__uinfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetUserInfo_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",uinfo:"];
  [ms appendFormat: @"%@", __uinfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface SetUserInfo_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation SetUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[SetUserInfo_result class]]) {
    return NO;
  }
  SetUserInfo_result *other = (SetUserInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryUserInfo_args : NSObject <TBase, NSCoding> {
  Token __token;

  BOOL __token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
#endif

- (id) init;
- (id) initWithToken: (Token) token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

@end

@implementation QueryUserInfo_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryUserInfo_args class]]) {
    return NO;
  }
  QueryUserInfo_args *other = (QueryUserInfo_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryUserInfo_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryUserInfo_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface QueryUserInfo_result : NSObject <TBase, NSCoding> {
  UserInfoResult * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserInfoResult * success;
#endif

- (id) init;
- (id) initWithSuccess: (UserInfoResult *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserInfoResult *) success;
- (void) setSuccess: (UserInfoResult *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation QueryUserInfo_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UserInfoResult *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[QueryUserInfo_result class]]) {
    return NO;
  }
  QueryUserInfo_result *other = (QueryUserInfo_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UserInfoResult *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UserInfoResult *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserInfoResult *fieldValue = [[UserInfoResult alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QueryUserInfo_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QueryUserInfo_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateUserBucket_args : NSObject <TBase, NSCoding> {
  NSString * __umobile;
  int __ftype;

  BOOL __umobile_isset;
  BOOL __ftype_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
@property (nonatomic, getter=ftype, setter=setFtype:) int ftype;
#endif

- (id) init;
- (id) initWithUmobile: (NSString *) umobile ftype: (int) ftype;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

#if !__has_feature(objc_arc)
- (int) ftype;
- (void) setFtype: (int) ftype;
#endif
- (BOOL) ftypeIsSet;

@end

@implementation CreateUserBucket_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithUmobile: (NSString *) umobile ftype: (int) ftype
{
  self = [super init];
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  __ftype = ftype;
  __ftype_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"ftype"])
  {
    __ftype = [decoder decodeIntForKey: @"ftype"];
    __ftype_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
  if (__ftype_isset)
  {
    [encoder encodeInt: __ftype forKey: @"ftype"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  hash = (hash * 31) ^ __ftype_isset ? 2654435761 : 0;
  if (__ftype_isset)
  {
    hash = (hash * 31) ^ [@(__ftype) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateUserBucket_args class]]) {
    return NO;
  }
  CreateUserBucket_args *other = (CreateUserBucket_args *)anObject;
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  if ((__ftype_isset != other->__ftype_isset) ||
      (__ftype_isset && (__ftype != other->__ftype))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__umobile release_stub];
  [super dealloc_stub];
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (int) ftype {
  return __ftype;
}

- (void) setFtype: (int) ftype {
  __ftype = ftype;
  __ftype_isset = YES;
}

- (BOOL) ftypeIsSet {
  return __ftype_isset;
}

- (void) unsetFtype {
  __ftype_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateUserBucket_args"];
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ftype_isset) {
    [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ftype];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateUserBucket_args("];
  [ms appendString: @"umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @",ftype:"];
  [ms appendFormat: @"%i", __ftype];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateUserBucket_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CreateUserBucket_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[CreateUserBucket_result class]]) {
    return NO;
  }
  CreateUserBucket_result *other = (CreateUserBucket_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateUserBucket_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateUserBucket_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteBucketAllObj_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __ftype;

  BOOL __token_isset;
  BOOL __ftype_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=ftype, setter=setFtype:) int ftype;
#endif

- (id) init;
- (id) initWithToken: (Token) token ftype: (int) ftype;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) ftype;
- (void) setFtype: (int) ftype;
#endif
- (BOOL) ftypeIsSet;

@end

@implementation DeleteBucketAllObj_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token ftype: (int) ftype
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __ftype = ftype;
  __ftype_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"ftype"])
  {
    __ftype = [decoder decodeIntForKey: @"ftype"];
    __ftype_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__ftype_isset)
  {
    [encoder encodeInt: __ftype forKey: @"ftype"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __ftype_isset ? 2654435761 : 0;
  if (__ftype_isset)
  {
    hash = (hash * 31) ^ [@(__ftype) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteBucketAllObj_args class]]) {
    return NO;
  }
  DeleteBucketAllObj_args *other = (DeleteBucketAllObj_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__ftype_isset != other->__ftype_isset) ||
      (__ftype_isset && (__ftype != other->__ftype))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) ftype {
  return __ftype;
}

- (void) setFtype: (int) ftype {
  __ftype = ftype;
  __ftype_isset = YES;
}

- (BOOL) ftypeIsSet {
  return __ftype_isset;
}

- (void) unsetFtype {
  __ftype_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteBucketAllObj_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ftype_isset) {
    [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ftype];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteBucketAllObj_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",ftype:"];
  [ms appendFormat: @"%i", __ftype];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface DeleteBucketAllObj_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteBucketAllObj_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[DeleteBucketAllObj_result class]]) {
    return NO;
  }
  DeleteBucketAllObj_result *other = (DeleteBucketAllObj_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DeleteBucketAllObj_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DeleteBucketAllObj_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Cancel_args : NSObject <TBase, NSCoding> {
  Token __token;
  NSString * __umobile;

  BOOL __token_isset;
  BOOL __umobile_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, retain, getter=umobile, setter=setUmobile:) NSString * umobile;
#endif

- (id) init;
- (id) initWithToken: (Token) token umobile: (NSString *) umobile;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (NSString *) umobile;
- (void) setUmobile: (NSString *) umobile;
#endif
- (BOOL) umobileIsSet;

@end

@implementation Cancel_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token umobile: (NSString *) umobile
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __umobile = [umobile retain_stub];
  __umobile_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"umobile"])
  {
    __umobile = [[decoder decodeObjectForKey: @"umobile"] retain_stub];
    __umobile_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__umobile_isset)
  {
    [encoder encodeObject: __umobile forKey: @"umobile"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __umobile_isset ? 2654435761 : 0;
  if (__umobile_isset)
  {
    hash = (hash * 31) ^ [__umobile hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Cancel_args class]]) {
    return NO;
  }
  Cancel_args *other = (Cancel_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__umobile_isset != other->__umobile_isset) ||
      (__umobile_isset && ((__umobile || other->__umobile) && ![__umobile isEqual:other->__umobile]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [__umobile release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (NSString *) umobile {
  return [[__umobile retain_stub] autorelease_stub];
}

- (void) setUmobile: (NSString *) umobile {
  [umobile retain_stub];
  [__umobile release_stub];
  __umobile = umobile;
  __umobile_isset = YES;
}

- (BOOL) umobileIsSet {
  return __umobile_isset;
}

- (void) unsetUmobile {
  [__umobile release_stub];
  __umobile = nil;
  __umobile_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUmobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Cancel_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__umobile_isset) {
    if (__umobile != nil) {
      [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __umobile];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Cancel_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",umobile:"];
  [ms appendFormat: @"\"%@\"", __umobile];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Cancel_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Cancel_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Cancel_result class]]) {
    return NO;
  }
  Cancel_result *other = (Cancel_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Cancel_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Cancel_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Order_args : NSObject <TBase, NSCoding> {
  Token __token;
  int __ptype;

  BOOL __token_isset;
  BOOL __ptype_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=token, setter=setToken:) Token token;
@property (nonatomic, getter=ptype, setter=setPtype:) int ptype;
#endif

- (id) init;
- (id) initWithToken: (Token) token ptype: (int) ptype;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (Token) token;
- (void) setToken: (Token) token;
#endif
- (BOOL) tokenIsSet;

#if !__has_feature(objc_arc)
- (int) ptype;
- (void) setPtype: (int) ptype;
#endif
- (BOOL) ptypeIsSet;

@end

@implementation Order_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithToken: (Token) token ptype: (int) ptype
{
  self = [super init];
  __token = [token retain_stub];
  __token_isset = YES;
  __ptype = ptype;
  __ptype_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"token"])
  {
    __token = [[decoder decodeObjectForKey: @"token"] retain_stub];
    __token_isset = YES;
  }
  if ([decoder containsValueForKey: @"ptype"])
  {
    __ptype = [decoder decodeIntForKey: @"ptype"];
    __ptype_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__token_isset)
  {
    [encoder encodeObject: __token forKey: @"token"];
  }
  if (__ptype_isset)
  {
    [encoder encodeInt: __ptype forKey: @"ptype"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __token_isset ? 2654435761 : 0;
  if (__token_isset)
  {
    hash = (hash * 31) ^ [__token hash];
  }
  hash = (hash * 31) ^ __ptype_isset ? 2654435761 : 0;
  if (__ptype_isset)
  {
    hash = (hash * 31) ^ [@(__ptype) hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Order_args class]]) {
    return NO;
  }
  Order_args *other = (Order_args *)anObject;
  if ((__token_isset != other->__token_isset) ||
      (__token_isset && ((__token || other->__token) && ![__token isEqual:other->__token]))) {
    return NO;
  }
  if ((__ptype_isset != other->__ptype_isset) ||
      (__ptype_isset && (__ptype != other->__ptype))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__token release_stub];
  [super dealloc_stub];
}

- (NSString *) token {
  return [[__token retain_stub] autorelease_stub];
}

- (void) setToken: (NSString *) token {
  [token retain_stub];
  [__token release_stub];
  __token = token;
  __token_isset = YES;
}

- (BOOL) tokenIsSet {
  return __token_isset;
}

- (void) unsetToken {
  [__token release_stub];
  __token = nil;
  __token_isset = NO;
}

- (int) ptype {
  return __ptype;
}

- (void) setPtype: (int) ptype {
  __ptype = ptype;
  __ptype_isset = YES;
}

- (BOOL) ptypeIsSet {
  return __ptype_isset;
}

- (void) unsetPtype {
  __ptype_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setPtype: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Order_args"];
  if (__token_isset) {
    if (__token != nil) {
      [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ptype_isset) {
    [outProtocol writeFieldBeginWithName: @"ptype" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __ptype];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Order_args("];
  [ms appendString: @"token:"];
  [ms appendFormat: @"\"%@\"", __token];
  [ms appendString: @",ptype:"];
  [ms appendFormat: @"%i", __ptype];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Order_result : NSObject <TBase, NSCoding> {
  RetHead * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RetHead * success;
#endif

- (id) init;
- (id) initWithSuccess: (RetHead *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RetHead *) success;
- (void) setSuccess: (RetHead *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Order_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RetHead *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (NSUInteger) hash
{
  NSUInteger hash = 17;
  hash = (hash * 31) ^ __success_isset ? 2654435761 : 0;
  if (__success_isset)
  {
    hash = (hash * 31) ^ [__success hash];
  }
  return hash;
}

- (BOOL) isEqual: (id) anObject
{
  if (self == anObject) {
    return YES;
  }
  if (![anObject isKindOfClass:[Order_result class]]) {
    return NO;
  }
  Order_result *other = (Order_result *)anObject;
  if ((__success_isset != other->__success_isset) ||
      (__success_isset && ((__success || other->__success) && ![__success isEqual:other->__success]))) {
    return NO;
  }
  return YES;
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RetHead *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RetHead *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RetHead *fieldValue = [[RetHead alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Order_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Order_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CloudHardDiskServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) send_loginAuthApp: (NSString *) imie username: (NSString *) username password: (NSString *) password salt: (int32_t) salt
{
  [outProtocol writeMessageBeginWithName: @"loginAuthApp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginAuthApp_args"];
  if (imie != nil)  {
    [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 1];
    [outProtocol writeString: imie];
    [outProtocol writeFieldEnd];
  }
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"salt" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: salt];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (LoginResult *) recv_loginAuthApp
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  LoginAuthApp_result * result = [[[LoginAuthApp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginAuthApp failed: unknown result"];
}

- (LoginResult *) loginAuthApp: (NSString *) imie username: (NSString *) username password: (NSString *) password salt: (int32_t) salt
{
  [self send_loginAuthApp : imie username: username password: password salt: salt];
  [[outProtocol transport] flush];
  return [self recv_loginAuthApp];
}

- (void) send_loginAuth: (NSString *) username password: (NSString *) password salt: (NSString *) salt
{
  [outProtocol writeMessageBeginWithName: @"loginAuth" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginAuth_args"];
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (salt != nil)  {
    [outProtocol writeFieldBeginWithName: @"salt" type: TType_STRING fieldID: 3];
    [outProtocol writeString: salt];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (LoginResult *) recv_loginAuth
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  LoginAuth_result * result = [[[LoginAuth_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginAuth failed: unknown result"];
}

- (LoginResult *) loginAuth: (NSString *) username password: (NSString *) password salt: (NSString *) salt
{
  [self send_loginAuth : username password: password salt: salt];
  [[outProtocol transport] flush];
  return [self recv_loginAuth];
}

- (void) send_verificationLoginAuth: (NSString *) username password: (NSString *) password authcode: (NSString *) authcode
{
  [outProtocol writeMessageBeginWithName: @"verificationLoginAuth" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"verificationLoginAuth_args"];
  if (username != nil)  {
    [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 1];
    [outProtocol writeString: username];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (authcode != nil)  {
    [outProtocol writeFieldBeginWithName: @"authcode" type: TType_STRING fieldID: 3];
    [outProtocol writeString: authcode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (LoginResult *) recv_verificationLoginAuth
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  VerificationLoginAuth_result * result = [[[VerificationLoginAuth_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"verificationLoginAuth failed: unknown result"];
}

- (LoginResult *) verificationLoginAuth: (NSString *) username password: (NSString *) password authcode: (NSString *) authcode
{
  [self send_verificationLoginAuth : username password: password authcode: authcode];
  [[outProtocol transport] flush];
  return [self recv_verificationLoginAuth];
}

- (void) send_uploadFile: (Token) token uploadparam: (UploadParam *) uploadparam
{
  [outProtocol writeMessageBeginWithName: @"uploadFile" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"uploadFile_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (uploadparam != nil)  {
    [outProtocol writeFieldBeginWithName: @"uploadparam" type: TType_STRUCT fieldID: 2];
    [uploadparam write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (UploaddResult *) recv_uploadFile
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UploadFile_result * result = [[[UploadFile_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"uploadFile failed: unknown result"];
}

- (UploaddResult *) uploadFile: (Token) token uploadparam: (UploadParam *) uploadparam
{
  [self send_uploadFile : token uploadparam: uploadparam];
  [[outProtocol transport] flush];
  return [self recv_uploadFile];
}

- (void) send_queryFilterByFtype: (Token) token type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"queryFilterByFtype" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryFilterByFtype_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (GetFilterResult *) recv_queryFilterByFtype
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryFilterByFtype_result * result = [[[QueryFilterByFtype_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryFilterByFtype failed: unknown result"];
}

- (GetFilterResult *) queryFilterByFtype: (Token) token type: (int) type
{
  [self send_queryFilterByFtype : token type: type];
  [[outProtocol transport] flush];
  return [self recv_queryFilterByFtype];
}

- (void) send_queryFileList: (Token) token type: (int) type offset: (int32_t) offset count: (int32_t) count order: (int) order
{
  [outProtocol writeMessageBeginWithName: @"queryFileList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryFileList_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"count" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: count];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"order" type: TType_I32 fieldID: 5];
  [outProtocol writeI32: order];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryFListResult *) recv_queryFileList
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryFileList_result * result = [[[QueryFileList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryFileList failed: unknown result"];
}

- (QueryFListResult *) queryFileList: (Token) token type: (int) type offset: (int32_t) offset count: (int32_t) count order: (int) order
{
  [self send_queryFileList : token type: type offset: offset count: count order: order];
  [[outProtocol transport] flush];
  return [self recv_queryFileList];
}

- (void) send_QueryFile: (Token) token type: (int) type fname: (NSString *) fname
{
  [outProtocol writeMessageBeginWithName: @"QueryFile" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"QueryFile_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  if (fname != nil)  {
    [outProtocol writeFieldBeginWithName: @"fname" type: TType_STRING fieldID: 3];
    [outProtocol writeString: fname];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryFResult *) recv_QueryFile
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryFile_result * result = [[[QueryFile_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"QueryFile failed: unknown result"];
}

- (QueryFResult *) QueryFile: (Token) token type: (int) type fname: (NSString *) fname
{
  [self send_QueryFile : token type: type fname: fname];
  [[outProtocol transport] flush];
  return [self recv_QueryFile];
}

- (void) send_queryAttribute: (Token) token objid: (OBJID) objid type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"queryAttribute" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryAttribute_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (objid != nil)  {
    [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: objid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryAttributeResult *) recv_queryAttribute
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryAttribute_result * result = [[[QueryAttribute_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryAttribute failed: unknown result"];
}

- (QueryAttributeResult *) queryAttribute: (Token) token objid: (OBJID) objid type: (int) type
{
  [self send_queryAttribute : token objid: objid type: type];
  [[outProtocol transport] flush];
  return [self recv_queryAttribute];
}

- (void) send_allocobj: (Token) token item: (FileInfo *) item desc: (ObjDescrp) desc
{
  [outProtocol writeMessageBeginWithName: @"allocobj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"allocobj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (item != nil)  {
    [outProtocol writeFieldBeginWithName: @"item" type: TType_STRUCT fieldID: 2];
    [item write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (desc != nil)  {
    [outProtocol writeFieldBeginWithName: @"desc" type: TType_MAP fieldID: 3];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [desc count]];
      NSEnumerator * _iter38 = [desc keyEnumerator];
      id key39;
      while ((key39 = [_iter38 nextObject]))
      {
        [outProtocol writeString: key39];
        [outProtocol writeString: [desc objectForKey: key39]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (AllocObjResult *) recv_allocobj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Allocobj_result * result = [[[Allocobj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"allocobj failed: unknown result"];
}

- (AllocObjResult *) allocobj: (Token) token item: (FileInfo *) item desc: (ObjDescrp) desc
{
  [self send_allocobj : token item: item desc: desc];
  [[outProtocol transport] flush];
  return [self recv_allocobj];
}

- (void) send_queryobj: (Token) token type: (int) type objid: (NSString *) objid
{
  [outProtocol writeMessageBeginWithName: @"queryobj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryobj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  if (objid != nil)  {
    [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 3];
    [outProtocol writeString: objid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryUpldObjResult *) recv_queryobj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Queryobj_result * result = [[[Queryobj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryobj failed: unknown result"];
}

- (QueryUpldObjResult *) queryobj: (Token) token type: (int) type objid: (NSString *) objid
{
  [self send_queryobj : token type: type objid: objid];
  [[outProtocol transport] flush];
  return [self recv_queryobj];
}

- (void) send_appendObj: (Token) token oid: (OBJID) oid bin: (NSData *) bin type: (int) type offset: (int64_t) offset
{
  [outProtocol writeMessageBeginWithName: @"appendObj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"appendObj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (oid != nil)  {
    [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oid];
    [outProtocol writeFieldEnd];
  }
  if (bin != nil)  {
    [outProtocol writeFieldBeginWithName: @"bin" type: TType_STRING fieldID: 3];
    [outProtocol writeBinary: bin];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 5];
  [outProtocol writeI64: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_appendObj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  AppendObj_result * result = [[[AppendObj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"appendObj failed: unknown result"];
}

- (RetHead *) appendObj: (Token) token oid: (OBJID) oid bin: (NSData *) bin type: (int) type offset: (int64_t) offset
{
  [self send_appendObj : token oid: oid bin: bin type: type offset: offset];
  [[outProtocol transport] flush];
  return [self recv_appendObj];
}

- (void) send_commitObj: (Token) token oid: (OBJID) oid odescr: (ObjDescrp) odescr type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"commitObj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"commitObj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (oid != nil)  {
    [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oid];
    [outProtocol writeFieldEnd];
  }
  if (odescr != nil)  {
    [outProtocol writeFieldBeginWithName: @"odescr" type: TType_MAP fieldID: 3];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [odescr count]];
      NSEnumerator * _iter40 = [odescr keyEnumerator];
      id key41;
      while ((key41 = [_iter40 nextObject]))
      {
        [outProtocol writeString: key41];
        [outProtocol writeString: [odescr objectForKey: key41]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_commitObj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CommitObj_result * result = [[[CommitObj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"commitObj failed: unknown result"];
}

- (RetHead *) commitObj: (Token) token oid: (OBJID) oid odescr: (ObjDescrp) odescr type: (int) type
{
  [self send_commitObj : token oid: oid odescr: odescr type: type];
  [[outProtocol transport] flush];
  return [self recv_commitObj];
}

- (void) send_delObj: (Token) token oid: (OBJID) oid type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"delObj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"delObj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (oid != nil)  {
    [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_delObj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DelObj_result * result = [[[DelObj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"delObj failed: unknown result"];
}

- (RetHead *) delObj: (Token) token oid: (OBJID) oid type: (int) type
{
  [self send_delObj : token oid: oid type: type];
  [[outProtocol transport] flush];
  return [self recv_delObj];
}

- (void) send_querusage: (Token) token type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"querusage" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"querusage_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (UsageResult *) recv_querusage
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Querusage_result * result = [[[Querusage_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"querusage failed: unknown result"];
}

- (UsageResult *) querusage: (Token) token type: (int) type
{
  [self send_querusage : token type: type];
  [[outProtocol transport] flush];
  return [self recv_querusage];
}

- (void) send_downloadFile: (Token) token param: (DownloadParam *) param
{
  [outProtocol writeMessageBeginWithName: @"downloadFile" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"downloadFile_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (param != nil)  {
    [outProtocol writeFieldBeginWithName: @"param" type: TType_STRUCT fieldID: 2];
    [param write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (DownloadResult *) recv_downloadFile
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DownloadFile_result * result = [[[DownloadFile_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"downloadFile failed: unknown result"];
}

- (DownloadResult *) downloadFile: (Token) token param: (DownloadParam *) param
{
  [self send_downloadFile : token param: param];
  [[outProtocol transport] flush];
  return [self recv_downloadFile];
}

- (void) send_renameObj: (Token) token oid: (OBJID) oid newname: (NSString *) newname type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"renameObj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"renameObj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (oid != nil)  {
    [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oid];
    [outProtocol writeFieldEnd];
  }
  if (newname != nil)  {
    [outProtocol writeFieldBeginWithName: @"newname" type: TType_STRING fieldID: 3];
    [outProtocol writeString: newname];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_renameObj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  RenameObj_result * result = [[[RenameObj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"renameObj failed: unknown result"];
}

- (RetHead *) renameObj: (Token) token oid: (OBJID) oid newname: (NSString *) newname type: (int) type
{
  [self send_renameObj : token oid: oid newname: newname type: type];
  [[outProtocol transport] flush];
  return [self recv_renameObj];
}

- (void) send_CreateShare: (Token) token oid: (OBJID) oid type: (int) type
{
  [outProtocol writeMessageBeginWithName: @"CreateShare" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"CreateShare_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (oid != nil)  {
    [outProtocol writeFieldBeginWithName: @"oid" type: TType_STRING fieldID: 2];
    [outProtocol writeString: oid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (CreateShareResult *) recv_CreateShare
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CreateShare_result * result = [[[CreateShare_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"CreateShare failed: unknown result"];
}

- (CreateShareResult *) CreateShare: (Token) token oid: (OBJID) oid type: (int) type
{
  [self send_CreateShare : token oid: oid type: type];
  [[outProtocol transport] flush];
  return [self recv_CreateShare];
}

- (void) send_GetVer
{
  [outProtocol writeMessageBeginWithName: @"GetVer" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetVer_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (VersionResult *) recv_GetVer
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetVer_result * result = [[[GetVer_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetVer failed: unknown result"];
}

- (VersionResult *) GetVer
{
  [self send_GetVer];
  [[outProtocol transport] flush];
  return [self recv_GetVer];
}

- (void) send_queryApps
{
  [outProtocol writeMessageBeginWithName: @"queryApps" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryApps_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryAppResult *) recv_queryApps
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryApps_result * result = [[[QueryApps_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryApps failed: unknown result"];
}

- (QueryAppResult *) queryApps
{
  [self send_queryApps];
  [[outProtocol transport] flush];
  return [self recv_queryApps];
}

- (void) send_queryHelp
{
  [outProtocol writeMessageBeginWithName: @"queryHelp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryHelp_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryHelpResult *) recv_queryHelp
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryHelp_result * result = [[[QueryHelp_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryHelp failed: unknown result"];
}

- (QueryHelpResult *) queryHelp
{
  [self send_queryHelp];
  [[outProtocol transport] flush];
  return [self recv_queryHelp];
}

- (void) send_queryFee: (Token) token
{
  [outProtocol writeMessageBeginWithName: @"queryFee" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryFee_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryFeeResult *) recv_queryFee
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryFee_result * result = [[[QueryFee_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryFee failed: unknown result"];
}

- (QueryFeeResult *) queryFee: (Token) token
{
  [self send_queryFee : token];
  [[outProtocol transport] flush];
  return [self recv_queryFee];
}

- (void) send_queryThumbnail: (Token) token ftype: (int) ftype objid: (NSString *) objid
{
  [outProtocol writeMessageBeginWithName: @"queryThumbnail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"queryThumbnail_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: ftype];
  [outProtocol writeFieldEnd];
  if (objid != nil)  {
    [outProtocol writeFieldBeginWithName: @"objid" type: TType_STRING fieldID: 3];
    [outProtocol writeString: objid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (QueryThumbnailResult *) recv_queryThumbnail
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryThumbnail_result * result = [[[QueryThumbnail_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"queryThumbnail failed: unknown result"];
}

- (QueryThumbnailResult *) queryThumbnail: (Token) token ftype: (int) ftype objid: (NSString *) objid
{
  [self send_queryThumbnail : token ftype: ftype objid: objid];
  [[outProtocol transport] flush];
  return [self recv_queryThumbnail];
}

- (void) send_Resetpwd: (Token) token pwd: (NSString *) pwd umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  [outProtocol writeMessageBeginWithName: @"Resetpwd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Resetpwd_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (pwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
    [outProtocol writeString: pwd];
    [outProtocol writeFieldEnd];
  }
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 4];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_Resetpwd
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Resetpwd_result * result = [[[Resetpwd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Resetpwd failed: unknown result"];
}

- (RetHead *) Resetpwd: (Token) token pwd: (NSString *) pwd umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  [self send_Resetpwd : token pwd: pwd umobile: umobile captcha: captcha];
  [[outProtocol transport] flush];
  return [self recv_Resetpwd];
}

- (void) send_Changepwd: (Token) token pwd_org: (NSString *) pwd_org pwd: (NSString *) pwd
{
  [outProtocol writeMessageBeginWithName: @"Changepwd" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Changepwd_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (pwd_org != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd_org" type: TType_STRING fieldID: 2];
    [outProtocol writeString: pwd_org];
    [outProtocol writeFieldEnd];
  }
  if (pwd != nil)  {
    [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 3];
    [outProtocol writeString: pwd];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_Changepwd
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Changepwd_result * result = [[[Changepwd_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Changepwd failed: unknown result"];
}

- (RetHead *) Changepwd: (Token) token pwd_org: (NSString *) pwd_org pwd: (NSString *) pwd
{
  [self send_Changepwd : token pwd_org: pwd_org pwd: pwd];
  [[outProtocol transport] flush];
  return [self recv_Changepwd];
}

- (void) send_Resetimie: (NSString *) imie umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  [outProtocol writeMessageBeginWithName: @"Resetimie" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Resetimie_args"];
  if (imie != nil)  {
    [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 1];
    [outProtocol writeString: imie];
    [outProtocol writeFieldEnd];
  }
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 3];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_Resetimie
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Resetimie_result * result = [[[Resetimie_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Resetimie failed: unknown result"];
}

- (RetHead *) Resetimie: (NSString *) imie umobile: (NSString *) umobile captcha: (NSString *) captcha
{
  [self send_Resetimie : imie umobile: umobile captcha: captcha];
  [[outProtocol transport] flush];
  return [self recv_Resetimie];
}

- (void) send_BindUmobile: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  [outProtocol writeMessageBeginWithName: @"BindUmobile" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"BindUmobile_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (imie != nil)  {
    [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 4];
    [outProtocol writeString: imie];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_BindUmobile
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  BindUmobile_result * result = [[[BindUmobile_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"BindUmobile failed: unknown result"];
}

- (RetHead *) BindUmobile: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  [self send_BindUmobile : token captcha: captcha umobile: umobile imie: imie];
  [[outProtocol transport] flush];
  return [self recv_BindUmobile];
}

- (void) send_UnBindUmobile: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  [outProtocol writeMessageBeginWithName: @"UnBindUmobile" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"UnBindUmobile_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 3];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (imie != nil)  {
    [outProtocol writeFieldBeginWithName: @"imie" type: TType_STRING fieldID: 4];
    [outProtocol writeString: imie];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_UnBindUmobile
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  UnBindUmobile_result * result = [[[UnBindUmobile_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"UnBindUmobile failed: unknown result"];
}

- (RetHead *) UnBindUmobile: (Token) token captcha: (NSString *) captcha umobile: (NSString *) umobile imie: (NSString *) imie
{
  [self send_UnBindUmobile : token captcha: captcha umobile: umobile imie: imie];
  [[outProtocol transport] flush];
  return [self recv_UnBindUmobile];
}

- (void) send_RegistUser: (NSString *) umobile password: (NSString *) password captcha: (NSString *) captcha
{
  [outProtocol writeMessageBeginWithName: @"RegistUser" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"RegistUser_args"];
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 2];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 3];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_RegistUser
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  RegistUser_result * result = [[[RegistUser_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"RegistUser failed: unknown result"];
}

- (RetHead *) RegistUser: (NSString *) umobile password: (NSString *) password captcha: (NSString *) captcha
{
  [self send_RegistUser : umobile password: password captcha: captcha];
  [[outProtocol transport] flush];
  return [self recv_RegistUser];
}

- (void) send_VerifyCathcha: (NSString *) umobile captcha: (NSString *) captcha
{
  [outProtocol writeMessageBeginWithName: @"VerifyCathcha" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"VerifyCathcha_args"];
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  if (captcha != nil)  {
    [outProtocol writeFieldBeginWithName: @"captcha" type: TType_STRING fieldID: 2];
    [outProtocol writeString: captcha];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_VerifyCathcha
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  VerifyCathcha_result * result = [[[VerifyCathcha_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"VerifyCathcha failed: unknown result"];
}

- (RetHead *) VerifyCathcha: (NSString *) umobile captcha: (NSString *) captcha
{
  [self send_VerifyCathcha : umobile captcha: captcha];
  [[outProtocol transport] flush];
  return [self recv_VerifyCathcha];
}

- (void) send_SetAlias: (Token) token ualias: (NSString *) ualias
{
  [outProtocol writeMessageBeginWithName: @"SetAlias" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetAlias_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (ualias != nil)  {
    [outProtocol writeFieldBeginWithName: @"ualias" type: TType_STRING fieldID: 2];
    [outProtocol writeString: ualias];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_SetAlias
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetAlias_result * result = [[[SetAlias_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetAlias failed: unknown result"];
}

- (RetHead *) SetAlias: (Token) token ualias: (NSString *) ualias
{
  [self send_SetAlias : token ualias: ualias];
  [[outProtocol transport] flush];
  return [self recv_SetAlias];
}

- (void) send_QueryAlias: (Token) token
{
  [outProtocol writeMessageBeginWithName: @"QueryAlias" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"QueryAlias_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (UserAliasResult *) recv_QueryAlias
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryAlias_result * result = [[[QueryAlias_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"QueryAlias failed: unknown result"];
}

- (UserAliasResult *) QueryAlias: (Token) token
{
  [self send_QueryAlias : token];
  [[outProtocol transport] flush];
  return [self recv_QueryAlias];
}

- (void) send_GetMobileAccessUrl
{
  [outProtocol writeMessageBeginWithName: @"GetMobileAccessUrl" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetMobileAccessUrl_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NetURLResult *) recv_GetMobileAccessUrl
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetMobileAccessUrl_result * result = [[[GetMobileAccessUrl_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetMobileAccessUrl failed: unknown result"];
}

- (NetURLResult *) GetMobileAccessUrl
{
  [self send_GetMobileAccessUrl];
  [[outProtocol transport] flush];
  return [self recv_GetMobileAccessUrl];
}

- (void) send_GetMobileNumber: (NSString *) Url
{
  [outProtocol writeMessageBeginWithName: @"GetMobileNumber" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"GetMobileNumber_args"];
  if (Url != nil)  {
    [outProtocol writeFieldBeginWithName: @"Url" type: TType_STRING fieldID: 1];
    [outProtocol writeString: Url];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (NetMobileNumberResult *) recv_GetMobileNumber
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  GetMobileNumber_result * result = [[[GetMobileNumber_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"GetMobileNumber failed: unknown result"];
}

- (NetMobileNumberResult *) GetMobileNumber: (NSString *) Url
{
  [self send_GetMobileNumber : Url];
  [[outProtocol transport] flush];
  return [self recv_GetMobileNumber];
}

- (void) send_SetUserInfo: (Token) token uinfo: (UserInfo *) uinfo
{
  [outProtocol writeMessageBeginWithName: @"SetUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"SetUserInfo_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (uinfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"uinfo" type: TType_STRUCT fieldID: 2];
    [uinfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_SetUserInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  SetUserInfo_result * result = [[[SetUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"SetUserInfo failed: unknown result"];
}

- (RetHead *) SetUserInfo: (Token) token uinfo: (UserInfo *) uinfo
{
  [self send_SetUserInfo : token uinfo: uinfo];
  [[outProtocol transport] flush];
  return [self recv_SetUserInfo];
}

- (void) send_QueryUserInfo: (Token) token
{
  [outProtocol writeMessageBeginWithName: @"QueryUserInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"QueryUserInfo_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (UserInfoResult *) recv_QueryUserInfo
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  QueryUserInfo_result * result = [[[QueryUserInfo_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"QueryUserInfo failed: unknown result"];
}

- (UserInfoResult *) QueryUserInfo: (Token) token
{
  [self send_QueryUserInfo : token];
  [[outProtocol transport] flush];
  return [self recv_QueryUserInfo];
}

- (void) send_CreateUserBucket: (NSString *) umobile ftype: (int) ftype
{
  [outProtocol writeMessageBeginWithName: @"CreateUserBucket" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"CreateUserBucket_args"];
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 1];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: ftype];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_CreateUserBucket
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  CreateUserBucket_result * result = [[[CreateUserBucket_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"CreateUserBucket failed: unknown result"];
}

- (RetHead *) CreateUserBucket: (NSString *) umobile ftype: (int) ftype
{
  [self send_CreateUserBucket : umobile ftype: ftype];
  [[outProtocol transport] flush];
  return [self recv_CreateUserBucket];
}

- (void) send_DeleteBucketAllObj: (Token) token ftype: (int) ftype
{
  [outProtocol writeMessageBeginWithName: @"DeleteBucketAllObj" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"DeleteBucketAllObj_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"ftype" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: ftype];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_DeleteBucketAllObj
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  DeleteBucketAllObj_result * result = [[[DeleteBucketAllObj_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"DeleteBucketAllObj failed: unknown result"];
}

- (RetHead *) DeleteBucketAllObj: (Token) token ftype: (int) ftype
{
  [self send_DeleteBucketAllObj : token ftype: ftype];
  [[outProtocol transport] flush];
  return [self recv_DeleteBucketAllObj];
}

- (void) send_Cancel: (Token) token umobile: (NSString *) umobile
{
  [outProtocol writeMessageBeginWithName: @"Cancel" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Cancel_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  if (umobile != nil)  {
    [outProtocol writeFieldBeginWithName: @"umobile" type: TType_STRING fieldID: 2];
    [outProtocol writeString: umobile];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_Cancel
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Cancel_result * result = [[[Cancel_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Cancel failed: unknown result"];
}

- (RetHead *) Cancel: (Token) token umobile: (NSString *) umobile
{
  [self send_Cancel : token umobile: umobile];
  [[outProtocol transport] flush];
  return [self recv_Cancel];
}

- (void) send_Order: (Token) token ptype: (int) ptype
{
  [outProtocol writeMessageBeginWithName: @"Order" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"Order_args"];
  if (token != nil)  {
    [outProtocol writeFieldBeginWithName: @"token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"ptype" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: ptype];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
}

- (RetHead *) recv_Order
{
  TApplicationException * x = [self checkIncomingMessageException];
  if (x != nil)  {
    @throw x;
  }
  Order_result * result = [[[Order_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"Order failed: unknown result"];
}

- (RetHead *) Order: (Token) token ptype: (int) ptype
{
  [self send_Order : token ptype: ptype];
  [[outProtocol transport] flush];
  return [self recv_Order];
}

@end

@implementation CloudHardDiskServiceProcessor

- (id) initWithCloudHardDiskService: (id <CloudHardDiskService>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_loginAuthApp_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"loginAuthApp"];
}
{
  SEL s = @selector(process_loginAuth_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"loginAuth"];
}
{
  SEL s = @selector(process_verificationLoginAuth_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"verificationLoginAuth"];
}
{
  SEL s = @selector(process_uploadFile_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"uploadFile"];
}
{
  SEL s = @selector(process_queryFilterByFtype_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryFilterByFtype"];
}
{
  SEL s = @selector(process_queryFileList_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryFileList"];
}
{
  SEL s = @selector(process_QueryFile_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"QueryFile"];
}
{
  SEL s = @selector(process_queryAttribute_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryAttribute"];
}
{
  SEL s = @selector(process_allocobj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"allocobj"];
}
{
  SEL s = @selector(process_queryobj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryobj"];
}
{
  SEL s = @selector(process_appendObj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"appendObj"];
}
{
  SEL s = @selector(process_commitObj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"commitObj"];
}
{
  SEL s = @selector(process_delObj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"delObj"];
}
{
  SEL s = @selector(process_querusage_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"querusage"];
}
{
  SEL s = @selector(process_downloadFile_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"downloadFile"];
}
{
  SEL s = @selector(process_renameObj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"renameObj"];
}
{
  SEL s = @selector(process_CreateShare_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"CreateShare"];
}
{
  SEL s = @selector(process_GetVer_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"GetVer"];
}
{
  SEL s = @selector(process_queryApps_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryApps"];
}
{
  SEL s = @selector(process_queryHelp_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryHelp"];
}
{
  SEL s = @selector(process_queryFee_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryFee"];
}
{
  SEL s = @selector(process_queryThumbnail_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"queryThumbnail"];
}
{
  SEL s = @selector(process_Resetpwd_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Resetpwd"];
}
{
  SEL s = @selector(process_Changepwd_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Changepwd"];
}
{
  SEL s = @selector(process_Resetimie_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Resetimie"];
}
{
  SEL s = @selector(process_BindUmobile_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"BindUmobile"];
}
{
  SEL s = @selector(process_UnBindUmobile_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"UnBindUmobile"];
}
{
  SEL s = @selector(process_RegistUser_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"RegistUser"];
}
{
  SEL s = @selector(process_VerifyCathcha_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"VerifyCathcha"];
}
{
  SEL s = @selector(process_SetAlias_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"SetAlias"];
}
{
  SEL s = @selector(process_QueryAlias_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"QueryAlias"];
}
{
  SEL s = @selector(process_GetMobileAccessUrl_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"GetMobileAccessUrl"];
}
{
  SEL s = @selector(process_GetMobileNumber_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"GetMobileNumber"];
}
{
  SEL s = @selector(process_SetUserInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"SetUserInfo"];
}
{
  SEL s = @selector(process_QueryUserInfo_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"QueryUserInfo"];
}
{
  SEL s = @selector(process_CreateUserBucket_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"CreateUserBucket"];
}
{
  SEL s = @selector(process_DeleteBucketAllObj_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"DeleteBucketAllObj"];
}
{
  SEL s = @selector(process_Cancel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Cancel"];
}
{
  SEL s = @selector(process_Order_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"Order"];
}
return self;
}

- (id<CloudHardDiskService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_loginAuthApp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
loginAuthApp_args * args = [[loginAuthApp_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
LoginAuthApp_result * result = [[LoginAuthApp_result alloc] init];
[result setSuccess: [mService loginAuthApp: [args imie] username: [args username] password: [args password] salt: [args salt]]];
[outProtocol writeMessageBeginWithName: @"loginAuthApp"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_loginAuth_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
loginAuth_args * args = [[loginAuth_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
LoginAuth_result * result = [[LoginAuth_result alloc] init];
[result setSuccess: [mService loginAuth: [args username] password: [args password] salt: [args salt]]];
[outProtocol writeMessageBeginWithName: @"loginAuth"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_verificationLoginAuth_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
verificationLoginAuth_args * args = [[verificationLoginAuth_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
VerificationLoginAuth_result * result = [[VerificationLoginAuth_result alloc] init];
[result setSuccess: [mService verificationLoginAuth: [args username] password: [args password] authcode: [args authcode]]];
[outProtocol writeMessageBeginWithName: @"verificationLoginAuth"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_uploadFile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
uploadFile_args * args = [[uploadFile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UploadFile_result * result = [[UploadFile_result alloc] init];
[result setSuccess: [mService uploadFile: [args token] uploadparam: [args uploadparam]]];
[outProtocol writeMessageBeginWithName: @"uploadFile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryFilterByFtype_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryFilterByFtype_args * args = [[queryFilterByFtype_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryFilterByFtype_result * result = [[QueryFilterByFtype_result alloc] init];
[result setSuccess: [mService queryFilterByFtype: [args token] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"queryFilterByFtype"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryFileList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryFileList_args * args = [[queryFileList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryFileList_result * result = [[QueryFileList_result alloc] init];
[result setSuccess: [mService queryFileList: [args token] type: [args type] offset: [args offset] count: [args count] order: [args order]]];
[outProtocol writeMessageBeginWithName: @"queryFileList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_QueryFile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
QueryFile_args * args = [[QueryFile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryFile_result * result = [[QueryFile_result alloc] init];
[result setSuccess: [mService QueryFile: [args token] type: [args type] fname: [args fname]]];
[outProtocol writeMessageBeginWithName: @"QueryFile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryAttribute_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryAttribute_args * args = [[queryAttribute_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryAttribute_result * result = [[QueryAttribute_result alloc] init];
[result setSuccess: [mService queryAttribute: [args token] objid: [args objid] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"queryAttribute"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_allocobj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
allocobj_args * args = [[allocobj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Allocobj_result * result = [[Allocobj_result alloc] init];
[result setSuccess: [mService allocobj: [args token] item: [args item] desc: [args desc]]];
[outProtocol writeMessageBeginWithName: @"allocobj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryobj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryobj_args * args = [[queryobj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Queryobj_result * result = [[Queryobj_result alloc] init];
[result setSuccess: [mService queryobj: [args token] type: [args type] objid: [args objid]]];
[outProtocol writeMessageBeginWithName: @"queryobj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_appendObj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
appendObj_args * args = [[appendObj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AppendObj_result * result = [[AppendObj_result alloc] init];
[result setSuccess: [mService appendObj: [args token] oid: [args oid] bin: [args bin] type: [args type] offset: [args offset]]];
[outProtocol writeMessageBeginWithName: @"appendObj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_commitObj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
commitObj_args * args = [[commitObj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CommitObj_result * result = [[CommitObj_result alloc] init];
[result setSuccess: [mService commitObj: [args token] oid: [args oid] odescr: [args odescr] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"commitObj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_delObj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
delObj_args * args = [[delObj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DelObj_result * result = [[DelObj_result alloc] init];
[result setSuccess: [mService delObj: [args token] oid: [args oid] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"delObj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_querusage_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
querusage_args * args = [[querusage_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Querusage_result * result = [[Querusage_result alloc] init];
[result setSuccess: [mService querusage: [args token] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"querusage"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_downloadFile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
downloadFile_args * args = [[downloadFile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DownloadFile_result * result = [[DownloadFile_result alloc] init];
[result setSuccess: [mService downloadFile: [args token] param: [args param]]];
[outProtocol writeMessageBeginWithName: @"downloadFile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_renameObj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
renameObj_args * args = [[renameObj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RenameObj_result * result = [[RenameObj_result alloc] init];
[result setSuccess: [mService renameObj: [args token] oid: [args oid] newname: [args newname] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"renameObj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_CreateShare_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
CreateShare_args * args = [[CreateShare_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CreateShare_result * result = [[CreateShare_result alloc] init];
[result setSuccess: [mService CreateShare: [args token] oid: [args oid] type: [args type]]];
[outProtocol writeMessageBeginWithName: @"CreateShare"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_GetVer_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
GetVer_args * args = [[GetVer_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetVer_result * result = [[GetVer_result alloc] init];
[result setSuccess: [mService GetVer]];
[outProtocol writeMessageBeginWithName: @"GetVer"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryApps_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryApps_args * args = [[queryApps_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryApps_result * result = [[QueryApps_result alloc] init];
[result setSuccess: [mService queryApps]];
[outProtocol writeMessageBeginWithName: @"queryApps"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryHelp_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryHelp_args * args = [[queryHelp_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryHelp_result * result = [[QueryHelp_result alloc] init];
[result setSuccess: [mService queryHelp]];
[outProtocol writeMessageBeginWithName: @"queryHelp"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryFee_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryFee_args * args = [[queryFee_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryFee_result * result = [[QueryFee_result alloc] init];
[result setSuccess: [mService queryFee: [args token]]];
[outProtocol writeMessageBeginWithName: @"queryFee"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_queryThumbnail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
queryThumbnail_args * args = [[queryThumbnail_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryThumbnail_result * result = [[QueryThumbnail_result alloc] init];
[result setSuccess: [mService queryThumbnail: [args token] ftype: [args ftype] objid: [args objid]]];
[outProtocol writeMessageBeginWithName: @"queryThumbnail"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_Resetpwd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Resetpwd_args * args = [[Resetpwd_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Resetpwd_result * result = [[Resetpwd_result alloc] init];
[result setSuccess: [mService Resetpwd: [args token] pwd: [args pwd] umobile: [args umobile] captcha: [args captcha]]];
[outProtocol writeMessageBeginWithName: @"Resetpwd"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_Changepwd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Changepwd_args * args = [[Changepwd_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Changepwd_result * result = [[Changepwd_result alloc] init];
[result setSuccess: [mService Changepwd: [args token] pwd_org: [args pwd_org] pwd: [args pwd]]];
[outProtocol writeMessageBeginWithName: @"Changepwd"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_Resetimie_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Resetimie_args * args = [[Resetimie_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Resetimie_result * result = [[Resetimie_result alloc] init];
[result setSuccess: [mService Resetimie: [args imie] umobile: [args umobile] captcha: [args captcha]]];
[outProtocol writeMessageBeginWithName: @"Resetimie"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_BindUmobile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
BindUmobile_args * args = [[BindUmobile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
BindUmobile_result * result = [[BindUmobile_result alloc] init];
[result setSuccess: [mService BindUmobile: [args token] captcha: [args captcha] umobile: [args umobile] imie: [args imie]]];
[outProtocol writeMessageBeginWithName: @"BindUmobile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_UnBindUmobile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
UnBindUmobile_args * args = [[UnBindUmobile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UnBindUmobile_result * result = [[UnBindUmobile_result alloc] init];
[result setSuccess: [mService UnBindUmobile: [args token] captcha: [args captcha] umobile: [args umobile] imie: [args imie]]];
[outProtocol writeMessageBeginWithName: @"UnBindUmobile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_RegistUser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
RegistUser_args * args = [[RegistUser_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RegistUser_result * result = [[RegistUser_result alloc] init];
[result setSuccess: [mService RegistUser: [args umobile] password: [args password] captcha: [args captcha]]];
[outProtocol writeMessageBeginWithName: @"RegistUser"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_VerifyCathcha_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
VerifyCathcha_args * args = [[VerifyCathcha_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
VerifyCathcha_result * result = [[VerifyCathcha_result alloc] init];
[result setSuccess: [mService VerifyCathcha: [args umobile] captcha: [args captcha]]];
[outProtocol writeMessageBeginWithName: @"VerifyCathcha"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_SetAlias_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
SetAlias_args * args = [[SetAlias_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetAlias_result * result = [[SetAlias_result alloc] init];
[result setSuccess: [mService SetAlias: [args token] ualias: [args ualias]]];
[outProtocol writeMessageBeginWithName: @"SetAlias"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_QueryAlias_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
QueryAlias_args * args = [[QueryAlias_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryAlias_result * result = [[QueryAlias_result alloc] init];
[result setSuccess: [mService QueryAlias: [args token]]];
[outProtocol writeMessageBeginWithName: @"QueryAlias"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_GetMobileAccessUrl_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
GetMobileAccessUrl_args * args = [[GetMobileAccessUrl_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetMobileAccessUrl_result * result = [[GetMobileAccessUrl_result alloc] init];
[result setSuccess: [mService GetMobileAccessUrl]];
[outProtocol writeMessageBeginWithName: @"GetMobileAccessUrl"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_GetMobileNumber_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
GetMobileNumber_args * args = [[GetMobileNumber_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetMobileNumber_result * result = [[GetMobileNumber_result alloc] init];
[result setSuccess: [mService GetMobileNumber: [args Url]]];
[outProtocol writeMessageBeginWithName: @"GetMobileNumber"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_SetUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
SetUserInfo_args * args = [[SetUserInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
SetUserInfo_result * result = [[SetUserInfo_result alloc] init];
[result setSuccess: [mService SetUserInfo: [args token] uinfo: [args uinfo]]];
[outProtocol writeMessageBeginWithName: @"SetUserInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_QueryUserInfo_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
QueryUserInfo_args * args = [[QueryUserInfo_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
QueryUserInfo_result * result = [[QueryUserInfo_result alloc] init];
[result setSuccess: [mService QueryUserInfo: [args token]]];
[outProtocol writeMessageBeginWithName: @"QueryUserInfo"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_CreateUserBucket_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
CreateUserBucket_args * args = [[CreateUserBucket_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CreateUserBucket_result * result = [[CreateUserBucket_result alloc] init];
[result setSuccess: [mService CreateUserBucket: [args umobile] ftype: [args ftype]]];
[outProtocol writeMessageBeginWithName: @"CreateUserBucket"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_DeleteBucketAllObj_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
DeleteBucketAllObj_args * args = [[DeleteBucketAllObj_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteBucketAllObj_result * result = [[DeleteBucketAllObj_result alloc] init];
[result setSuccess: [mService DeleteBucketAllObj: [args token] ftype: [args ftype]]];
[outProtocol writeMessageBeginWithName: @"DeleteBucketAllObj"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_Cancel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Cancel_args * args = [[Cancel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Cancel_result * result = [[Cancel_result alloc] init];
[result setSuccess: [mService Cancel: [args token] umobile: [args umobile]]];
[outProtocol writeMessageBeginWithName: @"Cancel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_Order_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
Order_args * args = [[Order_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Order_result * result = [[Order_result alloc] init];
[result setSuccess: [mService Order: [args token] ptype: [args ptype]]];
[outProtocol writeMessageBeginWithName: @"Order"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

