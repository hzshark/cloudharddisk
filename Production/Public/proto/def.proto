


/**
 * The first thing to know about are types. The available types in Thrift are:
 *
 *  bool        Boolean, one byte
 *  i8        Signed byte
 *  i16         Signed 16-bit integer
 *  i32         Signed 32-bit integer
 *  i64         Signed 64-bit integer
 *  double      64-bit floating point value
 *  string      String
 *  binary      Blob (byte array)
 *  map<t1,t2>  Map from one type to another
 *  list<t1>    Ordered list of one type
 *  set<t1>     Set of unique elements of one type
 *
 * Did you also notice that Thrift supports C style comments?
 */

namespace cpp proto
namespace java proto
namespace php proto

typedef i32 attrib
typedef map < attrib,set<FileInfo> >	FilesMatchList
typedef i64 Token


enum Errcode
{
    SUCCESS 			= 0;
    AUTH_ERR 			= 1;
    OUT_OF_SERVICE 		= 2;
    INVAILD_PARAMETER		= 3;
    INVAILD_IDENTIFY		= 4;// token 验证错误
    EXCEED_SESSION_LIMIT	= 5;// 并发限制 
    TRY_LATER		        = 6;
    ERR_OCCURED			= 7;// 未知异常错误     	
}

enum FTYPE{
  NORMAL = 1,           //普通文件
  SMS = 2,		// 短信备份文件
  ADDRESS = 3		//通讯录备份文件
  }


struct RetHead{ 
 1: Errcode ret;
 2: optional string errmsg;  
}

struct FileInfo{ 
 1:string filename;
 2:string filesize;
 3:string lastModified;
}


// rpc return 	data
struct queryResult {
  1: RetHead result;
  2: optional FilesMatchList files;
}

// login result
struct loginResult {
  1: RetHead result;
  2: Token  token;  //身份牌
  3: i32  space ;   //用户空间单位K
  4: i32  uspace;   //已经使用的用户空间 单位k
}

// download result
struct downloadResult {
 1: RetHead result;
}

// upload result
struct uploaddResult {
  1: RetHead result;
}

/**
 * Structs can also be exceptions, if they are nasty
exception InvalidOperation {
  1: i32 what,
  2: string why
}
 */



/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
service CloudHardDiskService {
	
       /*
	 imie,password可以为空 登录成功后会记录imie 和username的对应关系,如果 2者匹配关系发生变化,需要重新输入password
	 for auto login
	*/
	
    loginResult loginAuthApp(1:string imie ,2:string username ,3:string password ,4:i32 salt);  
    	
    loginResult loginAuth(1:string username ,2:string password ,3:i32 salt);

    loginResult verificationLoginAuth(1:string username,2:string password,3:string authcode );

    uploaddResult uploadFile(1:i64 userid,2:string url);

    //queryResult queryFileList(1:i64 userid);
    queryResult queryFileList(1:Token token ,2:FTYPE type);	  

    //downloadResult downloadFile(1:i64 userid, 2:string filename ); 

}

