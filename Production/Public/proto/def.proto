



/**
 * The first thing to know about are types. The available types in Thrift are:
 *
 *  bool        Boolean, one byte
 *  i8        Signed byte
 *  i16         Signed 16-bit integer
 *  i32         Signed 32-bit integer
 *  i64         Signed 64-bit integer
 *  double      64-bit floating point value
 *  string      String
 *  binary      Blob (byte array)
 *  map<t1,t2>  Map from one type to another
 *  list<t1>    Ordered list of one type
 *  set<t1>     Set of unique elements of one type
 *
 * Did you also notice that Thrift supports C style comments?
 */

namespace cpp proto
namespace java proto
namespace php proto

typedef list <FileInfo>	FilesMatchList
typedef string Token
typedef string OBJID   //资源id ,某个bucket的一个ojbect 


enum Errcode
{
    SUCCESS 			= 0;
    AUTH_ERR 			= 1;
    OUT_OF_SERVICE 		= 2;
    INVAILD_PARAMETER		= 3;
    INVAILD_IDENTIFY		= 4;// token 验证错误
    EXCEED_SESSION_LIMIT	= 5;// 并发限制 
    TRY_LATER		        = 6;
    ERR_OCCURED			= 7;// 未知异常错误     	
}

enum FTYPE{
  NORMAL = 1,           //普通文件
  SMS = 2,		// 短信备份文件
  ADDRESS = 3,		//通讯录备份文件
  DFlOW = 4,            // 3g 流量
  STORE   =5 ,              //存储 
  PICTURE = 6 ,		//图片
  MUSIC =7              //音乐
  }

enum SYNCTYPE{
  UPDATE = 1,           //改
  DELETE = 2,		//删
  ADD	 = 3		//增
  }

// the description of obj
struct ReqObjparam{ 
 1: string  filename; 
 2: FTYPE   type;    //根据类型 放置 存储目录
 3: optional string   comm;   //备注
}

// 利用thrift的序列化变成string 或bin 存储在ojbect中.
typedef map<string,string> ObjDescrp

struct RetHead{ 
 1: Errcode ret;
 2: optional string errmsg;  
}

struct FileInfo{ 
 1:string filename;
 2:i32    filesize;  //单位k
 3:OBJID  objid   ;  // 对象资源号 
 4:optional string lastModified;
}


// rpc return 	data
struct QueryFResult {
  1: RetHead result;
  2: optional FilesMatchList files;
}

// login result
struct LoginResult {
  1: RetHead result;
  2: Token  token;  //身份牌
  3: i32  space ;   //用户空间单位K
  4: i32  uspace;   //已经使用的用户空间 单位k
  5: optional i32  flow;     // 免费流量
  6: optional i32  uflow;    // 已使用流量
}

// download result

struct DownloadResult {
 1: RetHead result;
 2: binary bin;
 3: i64  offset ;   //
 4:Token token;
}


/**
**
* download parameter
*/
struct DownloadParam {
   1: OBJID objid;	
   2: i64 offerset=0;  
   3: i32 reqlen=1024; //默认传1k 一次
}


// upload result
struct UploaddResult {
  1: RetHead result;
}

// apply new result // 申请新的文件资源id  用于备份上传到  短信,通讯录
struct AllocObjResult {
  1: RetHead result;
  2: OBJID resourceid ;   //资源号, 指向bucket下或某个object资源
}

//query usage
struct UsageResult
{
  1:RetHead result; 	
  2:i32 capacity;
  3:i32 usage;
}

/**
**
* upload parameter
* 1: Token token
* 2: string filename
* 3: i64 offerstar
*/
struct UploadParam {
   1: string filename;
   2: i64 offerstar=0;
   3: binary bin;
}

struct QueryAttributeResult {
    1: RetHead result; 	
    2: Token token;
    3: string attribute_value;
}




/**
 * Structs can also be exceptions, if they are nasty
exception InvalidOperation {
  1: i32 what,
  2: string why
}
 */



/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
service CloudHardDiskService {
	
       /*
	 imie,password可以为空 登录成功后会记录imie 和username的对应关系,如果 2者匹配关系发生变化,需要重新输入password
	 for auto login
	*/
	
    LoginResult loginAuthApp(1:string imie ,2:string username ,3:string password ,4:i32 salt);  
    	
    LoginResult loginAuth(1:string username ,2:string password ,3:i32 salt);

    LoginResult verificationLoginAuth(1:string username,2:string password,3:string authcode );

    UploaddResult uploadFile(1:Token token ,2:UploadParam uploadparam);

    //queryResult queryFileList(1:i64 userid);
    QueryFResult queryFileList(1:Token token ,2:FTYPE type);


    QueryAttributeResult queryAttribute(1:Token token,2: string attribute,3: OBJID  objid);
    
    //RetHead     sysncnotepad(1:SYNCTYPE , 2:List notes);//完善中
 
    /*
    申请备份通讯录,作为文件方式上传给服务器
    */
    //ApplyNewResult  applybackupAddressbook(1:Token token ,2:String baktag);

   /*
    申请新的存储obj
   */
    AllocObjResult  allocobj(1:Token token ,2:FTYPE type,3:string tagname);	

    RetHead   appendObj(1:Token token,2:OBJID oid,3:binary bin );// 分块写入文件
    
    RetHead   commitObj(1:Token token,2:OBJID oid,3:ObjDescrp odescr );// param3 object 的描述  存放sms 通信表述信息
    
    RetHead  delObj(1:Token token,2:OBJID oid);

    UsageResult querusage(1:Token token,2:FTYPE type)		   
    
    DownloadResult downloadFile(1:Token token ,2:DownloadParam param); 
    
    

}

