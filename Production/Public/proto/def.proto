



/**
 * The first thing to know about are types. The available types in Thrift are:
 *
 *  bool        Boolean, one byte
 *  i8        Signed byte
 *  i16         Signed 16-bit integer
 *  i32         Signed 32-bit integer
 *  i64         Signed 64-bit integer
 *  double      64-bit floating point value
 *  string      String
 *  binary      Blob (byte array)
 *  map<t1,t2>  Map from one type to another
 *  list<t1>    Ordered list of one type
 *  set<t1>     Set of unique elements of one type
 *
 * Did you also notice that Thrift supports C style comments?
 */

namespace cpp proto
namespace java proto
namespace php proto

typedef list <FileInfo>	FilesMatchList
typedef string Token
typedef string OBJID   //资源id ,某个bucket的一个ojbect 

typedef list <BucketInfo> BucketList 

enum Errcode
{
    SUCCESS 			= 0;
    AUTH_ERR 			= 1;
    OUT_OF_SERVICE 		= 2;
    INVAILD_PARAMETER		= 3;
    INVAILD_IDENTIFY		= 4;// token 验证错误
    EXCEED_SESSION_LIMIT	= 5;// 并发限制 
    TRY_LATER		        = 6;
    ERR_OCCURED			= 7;// 未知异常错误    
    FILE_EXIST			= 8;// 文件已经存在
}

enum FTYPE{
  NORMAL = 1,           //普通文件
  SMS = 2,		// 短信备份文件
  ADDRESS = 3,		//通讯录备份文件
  DFlOW = 4,            // 3g 流量
  STORE   =5 ,              //存储 
  PICTURE = 6 ,		//图片
  MUSIC =7              //音乐
  }




enum PTYPE{
  FREE = 1,           // 免费套餐
  NINE = 2,               // 9元套餐
  FIFTEEN = 3,        // 15元套餐
  }

enum SYNCTYPE{
  UPDATE = 1,           //改
  DELETE = 2,		//删
  ADD	 = 3		//增
  }

// the description of obj
struct ReqObjparam{ 
 1: string  filename; 
 2: FTYPE   type;    //根据类型 放置 存储目录
 3: optional string   comm;   //备注
}

// 利用thrift的序列化变成string 或bin 存储在ojbect中.
typedef map<string,string> ObjDescrp

struct RetHead{ 
 1: Errcode ret;
 2: optional string msg;  
}

struct FileInfo{ 
 //1:string filename;
 1:OBJID  objid   ;  // 对象资源号 filename
 2:i64    filesize;  //单位byte
 3:FTYPE  ftype	  ;
 4:i32 lastModified; // 文件时间 seconds since 1970
 //6:i32    StID;    //手机中的图片存储id

}


// rpc return 	data
struct QueryFListResult {
  1: RetHead result;
  2: optional FilesMatchList files;
  /* 剩余的记录条数 */
  3: optional i32 spare ;
}

struct QueryFResult {
  1: RetHead result;
  2: optional FileInfo finfo;     
  //3: optional bool isstage   ;  // true 表示文件 还未上传完成,false 表示 
}

// login result
struct LoginResult {
  1: RetHead result;
  2: Token  token;  //身份牌
  3: i32  space ;   //用户空间单位K
  4: i32  uspace;   //已经使用的用户空间 单位k
  5: string aliasname;           // 别名
  6: i32 userid;             // 
  7: optional i32  flow;     // 免费流量
  8: optional i32  uflow;    // 已使用流量
}

// download result

struct DownloadResult {
 1: RetHead result;
 2: binary bin;
// 3: i64  spare ;   //剩余字节数
}


/**
**
* download parameter
*/
struct DownloadParam {
   1: OBJID objid;	
   2: i64 offerset=0;  
   3: i32 reqlen=1024; //默认每次请求1k字节的数据
   4: FTYPE type;
}


// upload result
struct UploaddResult {
  1: RetHead result;
}

// apply new result // 申请新的文件资源id  用于备份上传到  短信,通讯录
struct AllocObjResult {
  1: RetHead result;
  2: OBJID resourceid ;   //资源号, 指向bucket下或某个object资源
}

struct QueryUpldObjResult {
  1: RetHead result;
  2: i64   offset ;   
}

//query usage
struct UsageResult
{
  1:RetHead result; 	
  2:i32 capacity;
  3:i32 usage;
}

struct AppInfo
{
  1:string AppName;
  2:string AppVersion;
  3:string PackageName;
  4:i64 size;
  5:string url;// 下载地址
  6:string ico_url; //app图标
}

struct FeeInfo
{
  1:string PrdName;
  2:string Spnumber;//目标号码
  3:string Cost;   //花费
  4:string Smscmd; //发送的内容
  5:string Description; //描述
}

/**
**
* upload parameter
* 1: Token token
* 2: string filename
* 3: i64 offerstar
*/
struct UploadParam {
   1: string filename;
   2: i64 offerstar=0;
   3: binary bin;
   4: FTYPE type;
}

struct QueryAttributeResult {
    1: RetHead result; 	
    2: Token token;
    3: string attribute_value;
}

struct CreateShareResult {
    1: RetHead result; 	
    2: Token token;
    3: optional string url;
}

struct QueryAppResult {
    1: RetHead result; 	
    2: list<AppInfo>  msg;
}

struct QueryFeeResult {
    1: RetHead result; 	
    2: list<FeeInfo>  msg;
}


struct QueryThumbnailResult {
    1: RetHead result;
    2: binary bin;
}


struct QueryHelpResult {
    1: RetHead result; 	
    2: list<string>  msg;
}
/**
 * Structs can also be exceptions, if they are nasty
exception InvalidOperation {
  1: i32 what,
  2: string why
}
 */

struct VersionResult {
    1:RetHead result;
    2:string version;
    3:string url;
}

struct CaptchaResult {
    1:RetHead result;
    2:string captcha;
}


//get net mobile Access url
struct NetURLResult
{
  1:RetHead result;
  2:string url;
}

//get net mobile number
struct NetMobileNumberResult
{
  1:RetHead result;
  2:string url;
}

/**
 * Ahh, now onto the cool part, defining a service. Services just need a name
 * and can optionally inherit from another service using the extends keyword.
 */
service CloudHardDiskService {
	
       /*
	 imie,password可以为空 登录成功后会记录imie 和username的对应关系,如果 2者匹配关系发生变化,需要重新输入password
	 for auto login
	*/
	
    LoginResult loginAuthApp(1:string imie ,2:string username ,3:string password ,4:i32 salt);  
    	
    LoginResult loginAuth(1:string username ,2:string password ,3:i32 salt);

    LoginResult verificationLoginAuth(1:string username,2:string password,3:string authcode );

    UploaddResult uploadFile(1:Token token ,2:UploadParam uploadparam);

    //queryResult queryFileList(1:i64 userid); // param3 is offset , parma4 is expect return numbers 
    QueryFListResult queryFileList(1:Token token ,2:FTYPE type,3:i32 start,4:i32 excpet_num);

    QueryFResult QueryFile(1:Token token ,2:FTYPE type,3:string fname);

    // 查询文件描述属性 
    QueryAttributeResult queryAttribute(1:Token token,2: string attribute,3: OBJID  objid,4: FTYPE type);
    
    //RetHead     sysncnotepad(1:SYNCTYPE , 2:List notes);//完善中
 
    /*
    申请备份通讯录,作为文件方式上传给服务器
    */
    //ApplyNewResult  applybackupAddressbook(1:Token token ,2:String baktag);

   /*
    申请新的存储obj
    文件名为 *.mp3~  ,comit以后去掉~ . 表示文件完成.
   */
   
    
    // 需要查询 服务器端是否有同名的 未传完的 文件,如果存在应返回在result里面!!!!
    AllocObjResult  allocobj(1:Token token ,2:FTYPE type,3:string tagname); 
    
    QueryUpldObjResult  queryobj(1:Token token ,2:FTYPE type,3:string objid);

    RetHead   appendObj(1:Token token,2:OBJID oid,3:binary bin,4:FTYPE type);// 分块写入文件
    
    RetHead   commitObj(1:Token token,2:OBJID oid,3:ObjDescrp odescr,4:FTYPE type );// param3 object 的描述  存放sms 通信表述信息
    
    RetHead  delObj(1:Token token,2:OBJID oid,3: FTYPE type);

    UsageResult querusage(1:Token token,2:FTYPE type)		

    DownloadResult downloadFile(1:Token token ,2:DownloadParam param); 
    
    RetHead  renameObj(1:Token token,2:OBJID oid,3:string  newname,4: FTYPE type);
    
    CreateShareResult CreateShare(1:Token token,2:OBJID oid,3: FTYPE type); //需要 有一个默认分享到期时间,由服务端控制
    
    VersionResult GetVer(); //
    
    QueryAppResult queryApps();
    
    QueryHelpResult queryHelp();
    
    QueryFeeResult queryFee(1:Token token);
    
    QueryThumbnailResult queryThumbnail(1:Token token,2:FTYPE ftype,3:string objid);
    
    RetHead Resetpwd(1:Token token,2:string pwd); //重置密码

    RetHead Changepwd(1:Token token,2:string pwd_org,3:string pwd);//修改密码 让用户输入
    
    /**
    *绑定手机号码 建一个临时表. 将captcha保存, 对umobile 下发该captcha  .用户表中  uid ->umobile
    * 验证码校验 app端完成
    * imie 需要存入 uid->imie
    **/
    RetHead BindUmobile(2:string captcha,3:string umobile,4:string imie)
    //注册需要参数 1.用户名 2.密码 3.手机号 4.验证码 5.套餐类型
    RetHead RegistUser(1:string uname,2:string password;3:string umobile, 4:string captcha,5:PTYPE ptype);
     
    RetHead VerifyCathcha(1:Token token,2:string captcha);   
    RetHead OrderPlan(1:Token token,2:PTYPE ptype);     // use app order plan
    RetHead AddAlias(1:Token token,2:string ualias);
    RetHead DeleteAlias(1:Token token,2:string ualias);

    //获取手机访问url地址,url获取以后手机需要get访问以后才能调用获取手机号码接口
    NetURLResult GetMobileAccessUrl(1:Token token);
    //获取手机号码
    NetMobileNumberResult GetMobileNumber(1:Token token);
    // use changed user info
    RetHead ChangedUserInfo(1:Token token,2:string age,3:i32 sex);
    // touxiang wenjian ming: netdiskportrait
}

